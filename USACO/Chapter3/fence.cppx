/*
 ID: tito_911
 PROG: fence
 LANG: C++
 /*
 * /*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <bitset>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <valarray>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define SZ(v)					(int)v.size()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 2e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

struct edge {
	bool isDel;
	int to, revInd;
};

int n;
vector<vector<edge> > g;

struct cmp {
	int node;
	bool operator ()(const int &a, const int &b) {
		return g[node][a].to < g[node][b].to;
	}
};

vvi v;
vi res;
int deg[501];

void E(int src) {
	loop(i,SZ(g[src])) {
		int k = v[src][i];
		if (g[src][k].isDel)
			continue;
		g[src][k].isDel = 1;
		int j = g[src][k].to;
		g[j][g[src][k].revInd].isDel = 1;
		E(j);
	}
	res.PB(src);
}
int main() {
	freopen("fence.in", "rt", stdin);
	freopen("fence.out", "wt", stdout);
	int f, t;
	scanf("%d", &n);
	g.resize(501);
	v.resize(501);
	loop(i,n) {
		scanf("%d%d", &f, &t);
		edge e1 = { 0, t, g[t].size() };
		edge e2 = { 0, f, g[f].size() };
		g[f].PB(e1);
		g[t].PB(e2);
		v[f].PB(v[f].size());
		v[t].PB(v[t].size());
		deg[f]++;
		deg[t]++;
	}

	int me = -1, mo = -1;
	loop(i,501) {
		if (deg[i] & 1) {
			if (mo == -1)
				mo = i;
		}

		else if (deg[i] && me == -1)
			me = i;

		cmp c = { i };
		sort(v[i].begin(), v[i].end(), c);
	}

	if (mo == -1)
		E(me);
	else
		E(mo);
	reverse(ALL(res));
	loop(i,SZ(res))
		cout << res[i] << endl;
	return 0;
}
