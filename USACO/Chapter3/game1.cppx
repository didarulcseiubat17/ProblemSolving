/*
 ID: tito_911
 PROG: game1
 LANG: C++
 /*
  * /*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <bitset>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <valarray>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define SZ(v)					(int)v.size()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 2e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

int sz;
vi kotshina;
valarray<int> memo[200][200][2];

valarray<int> dp(int s, int e, bool turn) {
	if (e < s)
		return valarray<int> (2);

	valarray<int> & m = memo[s][e][turn];

	if (m.size())
		return m;

	m.resize(2);

	valarray<int> v1 = dp(s + 1, e, 1 - turn);
	valarray<int> v2 = dp(s, e - 1, 1 - turn);

	// turn  7sb meen ely 3aleh el dooor

	v1[turn] += kotshina[s];
	v2[turn] += kotshina[e];

	if (v1[turn] > v2[turn])
		m = v1;
	else
		m = v2;

	return m;

}
int main() {
	freopen("game1.in","rt",stdin);
	freopen("game1.out","wt",stdout);
	scanf("%d", &sz);
	kotshina.resize(sz);

	loop(i,sz)
		scanf("%d", &kotshina[i]);

	valarray<int> res = dp(0, sz - 1, 0);
	cout << res[0] << " " << res[1] << endl;
	return 0;
}
