/*
 ID: tito_911
 PROG: butter
 LANG: C++
 /*
 * /*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <bitset>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <valarray>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define SZ(v)					(int)v.size()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 2e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

valarray<int> dist;
int cows[801];
int n, p, c;
vector<vector<pair<int, int> > > g;

void D_J(int src) {
	dist.resize(p);
	dist = OO;
	dist[src] = 0;
	priority_queue<pii> q;
	q.push(MP(dist[src], src));
	while (!q.empty()) {
		int cur = q.top().second;
		q.pop();
		loop(i,SZ(g[cur])) {
			int j = g[cur][i].first;
			if (dist[cur] + g[cur][i].second < dist[j]) {
				dist[j] = dist[cur] + g[cur][i].second;
				q.push(MP(-dist[j], j));
			}
		}
	}
}
int main() {
	freopen("butter.in", "rt", stdin);
	freopen("butter.out", "wt", stdout);
	scanf("%d%d%d", &n, &p, &c);
	loop(i,n)
		scanf("%d", cows + i);
	g.resize(p);
	loop(i,c) {
		int f, t, cost;
		scanf("%d%d%d", &f, &t, &cost);
		f--, t--;
		g[f].PB(MP(t, cost));
		g[t].PB(MP(f, cost));
	}

	valarray<int> res(p);
	res = 0;
	loop(i,n) {
		D_J(cows[i] - 1);
		res += dist;
	}

	cout << res.min() << endl;
	return 0;
}
