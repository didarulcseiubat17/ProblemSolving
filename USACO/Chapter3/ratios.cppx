/*
ID: tito_911
 PROG: ratios
 LANG: C++
 */

/*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 2e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

int food[3][3];
int target[3];
int res[3];

int main() {

	freopen("ratios.in", "rt", stdin);
	freopen("ratios.out", "wt", stdout);

	scanf("%d%d%d", target, target + 1, target + 2);
	loop(i,3)
		loop(j,3)
			scanf("%d", food[i] + j);

	for (res[0] = 0; res[0] < 100; res[0]++) {
		for (res[1] = 0; res[1] < 100; res[1]++) {
			for (res[2] = 0; res[2] < 100; res[2]++) {

				int curRatio[3] = { 0 };

				loop(i,3)
					loop(j,3)
						curRatio[j] += (food[i][j] * res[i]);

				set<int> tmp;

				loop(k,3) {
					if ((target[k] == 0 && curRatio[k] != 0) || curRatio[k]
							% target[k] != 0)
						goto bara;

					else if (target[k])
						tmp.insert(curRatio[k] / target[k]);
				}

				if ((int) tmp.size() == 1 && *tmp.begin() != 0) {
					loop(u,3)
						cout << res[u] << " ";
					cout << *tmp.begin() << endl;
					return 0;
				}
				bara: ;
			}
		}
	}
	cout << "NONE\n";
	return 0;
}
