#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define SZ(a) ((int)(a).size())
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
typedef long long ll;
using namespace std;

struct Time {
	int hour, mint;

	bool operator >(Time t) {
		if (hour > t.hour)
			return 1;
		if (hour < t.hour)
			return 0;
		if (mint > t.mint)
			return 1;
		return 0;
	}

	Time operator =(Time t) {
		this->hour = t.hour;
		this->mint = t.mint;

		return (*this);
	}
	bool operator <=(Time t) {
		if (hour > t.hour)
			return 0;
		if (hour < t.hour)
			return 1;
		if (mint > t.mint)
			return 0;
		return 1;
	}

	int operator-(Time t) {
		int res = 0;
		Time cur = (*this);
		if (mint < t.mint) {
			cur.hour = (cur.hour - 1 + 24) % 24;
			mint += 60;
		}

		res += cur.mint - t.mint;
		if (cur.hour < t.hour)
			cur.hour += 24;

		res += (cur.hour - t.hour) * 60;

		return res;
	}

	Time operator +(int m) {
		Time cur = (*this);
		cur.mint += m;

		if (cur.mint >= 60) {
			cur.hour = (cur.hour + (cur.mint / 60)) % 24;
			cur.mint %= 60;
		}

		return cur;
	}
};
vector<pair<string, pair<int, int> > > streets;
double res = 0;
string src, dest;
Time cur;
int km = 0, tim = 0;

int calc() {
	int idx = 0;
	while (idx < SZ(streets)) {
		if (streets[idx].first == src)
			break;
		++idx;
	}

	bool end = 0;
	for (int i = idx; !end; ++i) {
		if (streets[i].first == dest)
			end = 1;

		Time old = cur, cmp = cur;
		tim += streets[i].second.second * streets[i].second.first;
		cur = cur + tim;
		cmp.mint += tim;
		if (cmp.mint >= 60) {
			cmp.hour = (cmp.hour + (cmp.mint / 60)) % 24;
			cmp.mint %= 60;
		}

		int oldkm = km, curcost;
		km += streets[i].second.first;
		if (oldkm <= 10){
			curcost += 1000 * (min(km, 10) - oldkm);
			res += curcost;
		}
		else if (oldkm <= 30){
			curcost += 250 * (min(km, 30) - oldkm);
			res += curcost;
		}
		else{
			curcost += 100 * (km - oldkm);
			res += curcost;
		}
		Time lim = { 6, 0 };
		if (cmp > lim && old <= lim)
			res += (cmp - old) * .2 / streets[i].second.first;
	}

	if ((double) km / tim < 30.0)
		res += .1 * res;

	return res;
}

void clear() {
	streets.clear();
	res = 0;
	src = dest = "";
	cur = {0,0};
	km = tim = 0;
}
int main() {

	freopen("c.in", "r", stdin);

	string st;
	clear();
	while (cin >> st) {
		if (st == "--")
			return 0;

		if (st == "$") {
			cin >> src >> dest;
			scanf("%d:%d", &cur.hour, &cur.mint);
			cout << calc() << endl;
			cin >> st;
			clear();
			continue;
		}

		int len, kmn;
		cin >> len >> kmn;
		streets.push_back(mp(st,mp(len,kmn)));
	}
	return 0;
}
