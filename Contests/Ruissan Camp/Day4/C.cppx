#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
typedef long long ll;
using namespace std;

string s1, s2;
int memo[110][110];
int DP(int i, int j) {
	if (i >= s1.size() || j >= s2.size())
		return 0;

	int &m = memo[i][j];
	if (m != -1)
		return m;

	if (s1[i] == s2[j])
		return m = DP(i + 1, j + 1) + 1;

	int c1 = DP(i + 1, j);
	int c2 = DP(i, j + 1);

	return m = max(c1, c2);
}
vi p1, p2;
void build(int i, int j) {
	if (i >= s1.size() || j >= s2.size())
		return;

	if (s1[i] == s2[j]) {
		p1.push_back(i + 1);
		p2.push_back(j + 1);
		build(i + 1, j + 1);
		return;
	}

	int c1 = DP(i + 1, j);
	int c2 = DP(i, j + 1);

	if (c1 >= c2)
		build(i + 1, j);
	else
		build(i, j + 1);

}
int main() {

	freopen("maxcon.im", "r", stdin);
	freopen("maxcom.out", "w", stdout);

	cin >> s1 >> s2;
	memset(memo, -1, sizeof memo);
	cout << DP(0, 0) << endl;
	build(0, 0);
	sort(be(p1)), sort(be(p2));

	fo(i,p1.size()-1)
		cout << p1[i] << " ";
	cout << p1.back() << endl;
	fo(i,p2.size()-1)
		cout << p2[i] << " ";
	cout << p2.back() << endl;

	return 0;
}
