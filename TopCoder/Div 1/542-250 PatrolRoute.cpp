#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
#define fnd(v,x) (find(all((v)),(x))!=(v).end())
typedef long long ll;
using namespace std;


class PatrolRoute {
public:
    int countRoutes(int X, int Y, int minT, int maxT) {
        ll x = X, y=Y;
        ll mod = 1000000007;
        //npaths = (X-d)*(d-1), d = 2(x3-x1), assuming x1<x2<x3
        //npaths[i] = x => number of values satisfying 2(x3-x1)=i is x
        ll xpaths[20002]={0};
        ll ysum[20002]={0};
        reps(i,2,x){
            xpaths[i*2] = ((x-i)*(i-1))%mod;
        }
        reps(i,2,y){
            ll ypaths = (y-i)*(i-1);
            ysum[i*2] = (ysum[(i-1)*2]+ypaths)%mod;
            ysum[i*2+1] = ysum[i*2];
        }

        //2(x3-x1) + 2(y3-y1) >=minT, 2(x3-x1) + 2(y3-y1) <=maxT

        ll res=0;
        for(int i=2; i<X; i++){
            ll lw = minT-i*2;
            ll hi = maxT-i*2;
            hi = min(hi, (y-1)*2);
            lw = min(lw, y*2); //beacause i'm accessing lw-1 not lw
            lw = max(lw,1LL);
            if(hi < 0) break;
            res += (xpaths[i*2]*((ysum[hi]-ysum[lw-1]+mod)%mod))%mod;
            res %= mod;
        }
        return (res*6)%mod;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
    cout << "]" << endl;
    PatrolRoute *obj;
    int answer;
    obj = new PatrolRoute();
    clock_t startTime = clock();
    answer = obj->countRoutes(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p4;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;
    int p4;

    {
        // ----- test 5 -----
        p0 = 69;
        p1 = 3;
        p2 = 16;
        p3 = 43;
        p4 = 53214;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }


    {
        // ----- test 0 -----
        p0 = 3;
        p1 = 3;
        p2 = 1;
        p3 = 20000;
        p4 = 6;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 3;
        p1 = 3;
        p2 = 4;
        p3 = 7;
        p4 = 0;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4;
        p1 = 6;
        p2 = 9;
        p3 = 12;
        p4 = 264;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 7;
        p1 = 5;
        p2 = 13;
        p3 = 18;
        p4 = 1212;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 4000;
        p1 = 4000;
        p2 = 4000;
        p3 = 14000;
        p4 = 859690013;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }



    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
