#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
#define fnd(v,x) (find(all((v)),(x))!=(v).end())
typedef long long ll;
using namespace std;


class StrIIRec {
public:
    int cum[22];
    void getGreater(string& s, int i, vector<pair<char,int> >& res){
        for (int j = sz(s)-1; j > i; --j) {
            if(s[j] > s[i])
                res.push_back(mp(s[j],j));
        }
        sort(all(res));
    }

    int go(string& s, int inv){
        for (int i = sz(s)-1; i >= 0; --i) {
            vector<pair<char,int> > v;
            getGreater(s,i,v);

            repi(it,v){
                int gr=0;
                int n = sz(s)-i-1;
                int res = n*(n-1)/2;
                res += i==0?0:cum[i-1];
                reps(j,i,sz(s)){
                    if(s[j] == it->first) continue;
                    if(it->first > s[j]) ++res,++gr;
                }

                if(res < inv) continue;
                swap(s[i],s[it->second]);
                sort(s.begin()+i+1, s.end());
                reps(j,i,sz(s)) cum[j] = (i==0?0:cum[i-1])+gr;
                return (i==0?0:cum[i-1])+gr;
            }

        }
        return 1<<27;
    }

    void app(string& s, int n){
        bool vis[27]={0};
        rep(i,sz(s))    vis[s[i]-'a']=1;

        int len=0;
        while(sz(s) < n){
            if(vis[len]){
                ++len;
                continue;
            }
            s += ('a'+len);
            ++len;
        }
    }

    string recovstr(int n, int minInv, string s) {
        mem(cum,0);
        app(s,n);
        rep(i,sz(s)){
            cum[i] = i==0?0:cum[i-1];
            reps(j,i+1,sz(s)){
                if(s[i] > s[j]) ++cum[i];
            }
        }
        if(cum[sz(s)-1] >= minInv) return s;
        int r=0;
        while((r=go(s,minInv)) < minInv);
        return r>=1<<27?"":s;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	StrIIRec *obj;
	string answer;
	obj = new StrIIRec();
	clock_t startTime = clock();
	answer = obj->recovstr(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	string p3;
    {
    // ----- test 5 -----
    p0 = 4;
    p1 = 6;
    p2 = "abcd";
    p3 = "dcba";
    all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }

	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 1;
	p2 = "ab";
	p3 = "ba";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	p1 = 1;
	p2 = "efcdgab";
	p3 = "efcdgabhi";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 11;
	p1 = 55;
	p2 = "debgikjfc";
	p3 = "kjihgfedcba";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 15;
	p1 = 0;
	p2 = "e";
	p3 = "eabcdfghijklmno";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 9;
	p1 = 20;
	p2 = "fcdebiha";
	p3 = "fcdehigba";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 20;
	p1 = 190;
	p2 = "abcdefghijklmnopqrst";
	p3 = "tsrqponmlkjihgfedcba";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}


	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
