#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define fnd(v,x) (find(all((v)),(x))!=(v).end())
typedef long long ll;
using namespace std;

class DengklekMakingChains {
public:

	int maxNum(string s) {
		int res = 0;
		int sum = 0;
		rep(i, sz(s)) {
			if (s[i] == '.')
				sum = 0;
			else
				sum += s[i] - '0';
			res = max(res, sum);
		}
		return res;
	}
	int maxBeauty(vector<string> chains) {
		chains.push_back("...");
		chains.push_back("...");
		string dig = "";
		vector<string> other;
		rep(i, sz(chains))
			if (fnd(chains[i],'.')==0)
				dig += chains[i];
			else
				other.push_back(chains[i]);

		int res = maxNum(dig);
		rep(i, sz(other))
		rep(j,sz(other))
		if (i != j)
			res = max(res, maxNum(other[i] + dig + other[j]));
		return res;
	}


};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<string> p0, bool hasAnswer,
	int p1) {
cout << "Test " << testNum << ": [" << "{";
for (int i = 0; int(p0.size()) > i; ++i) {
	if (i > 0) {
		cout << ",";
	}
	cout << "\"" << p0[i] << "\"";
}
cout << "}";
cout << "]" << endl;
DengklekMakingChains *obj;
int answer;
obj = new DengklekMakingChains();
clock_t startTime = clock();
answer = obj->maxBeauty(p0);
clock_t endTime = clock();
delete obj;
bool res;
res = true;
cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds"
		<< endl;
if (hasAnswer) {
	cout << "Desired answer:" << endl;
	cout << "\t" << p1 << endl;
}
cout << "Your answer:" << endl;
cout << "\t" << answer << endl;
if (hasAnswer) {
	res = answer == p1;
}
if (!res) {
	cout << "DOESN'T MATCH!!!!" << endl;
} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
	cout << "FAIL the timeout" << endl;
	res = false;
} else if (hasAnswer) {
	cout << "Match :-)" << endl;
} else {
	cout << "OK, but is it right?" << endl;
}
cout << "" << endl;
return res;
}
int main() {
bool all_right;
all_right = true;

vector<string> p0;
int p1;

{
	// ----- test 0 -----
	string t0[] = { ".15", "7..", "402", "..3" };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 1 -----
	string t0[] = { "..1", "7..", "567", "24.", "8..", "234" };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 2 -----
	string t0[] = { "...", "..." };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 3 -----
	string t0[] = { "16.", "9.8", ".24", "52.", "3.1", "532", "4.4", "111" };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 28;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 4 -----
	string t0[] = { "..1", "3..", "2..", ".7." };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 5 -----
	string t0[] = { "412", "..7", ".58", "7.8", "32.", "6..", "351", "3.9",
			"985", "...", ".46" };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
}

if (all_right) {
	cout << "You're a stud (at least on the example cases)!" << endl;
} else {
	cout << "Some of the test cases had errors." << endl;
}
return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
