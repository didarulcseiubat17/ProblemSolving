#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define find(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

class RabbitStepping
{
public:
    int get(string &str, vi &r) {
        vector<pii> v(sz(r));
        rep(i, sz(r)) {
            v[i] = mp(r[i], i);
        }
        int cnt = 0;
        int siz = sz(v);
        vector<pii> tmp;
        while(siz > 2) {
            tmp = v;
            rep(i, siz) {
                if(tmp[i].first == 0) continue;
                if(i == 0) v[i].first--, v[i + 1].first++, v[i + 1].second = i;
                else if(i >= siz - 2) v[i].first--, v[i - 1].first++, v[i - 1].second = i;
                else if(str[i] == 'W') v[i].first--, v[i - 1].first++, v[i - 1].second = i;
                else if(str[i] == 'B') v[i].first--, v[i + 1].first++, v[i + 1].second = i;
                else if(cnt == 0) v[i].first--, v[i - 1].first++, v[i - 1].second = i;
                else  v[v[i].second].first++, v[v[i].second].second = i, v[i].first--;
            }
            rep(i, siz) {
                if(v[i].first > 1) 
                    v[i] = mp(0, 0);
            }
            --siz;
            ++cnt;
            
        }
        cnt = 0;
        rep(i, siz) cnt += v[i].first;
        return cnt;
    }
    double getExpected(string field, int r) {
        vi v(sz(field), 0);
        repd(i, sz(field) - 1, sz(field) - r, 1) {
            v[i] = 1;
        }
        int cnt = 0;
        int sum = 0;
        do {
            sum += get(field, v);
            ++cnt;
        } while(next_permutation(all(v)));

        return (sum + 0.0) / cnt;

    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, double p2)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
    cout << "]" << endl;
    RabbitStepping *obj;
    double answer;
    obj = new RabbitStepping();
    clock_t startTime = clock();
    answer = obj->getExpected(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if(hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if(hasAnswer) {
        res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if(!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if(double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if(hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    int p1;
    double p2;

    {
        // ----- test 0 -----
        p0 = "WRBRW";
        p1 = 4;
        p2 = 0.8;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "WWB";
        p1 = 2;
        p2 = 1.3333333333333333;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "WW";
        p1 = 1;
        p2 = 1.0;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "BBBBBBBBBB";
        p1 = 4;
        p2 = 0.9523809523809523;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "RRBRRWRRBRRW";
        p1 = 8;
        p2 = 0.9696969696969697;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if(all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
