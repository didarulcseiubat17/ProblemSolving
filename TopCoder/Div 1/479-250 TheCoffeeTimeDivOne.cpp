#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

class TheCoffeeTimeDivOne
{
public:
    long long find(int n, vector <int> tea) {
        
        sort(rall(tea));
        int tank=7,pos=0;
        ll res=47;
        rep(i,sz(tea)){
            int idx = tea[i];
            res += abs(idx-pos);
            pos = idx;
            res += 4;
            if(--tank == 0 && i+1<sz(tea)){
                tank = 7;
                res += pos+47;
                pos = 0;
            }
        }
        res += pos;
        pos = 0;
        if(sz(tea) == n) return res;
        
        res += 47;
        tank = 7;
        int idx = 0;
        repd(i,n,1,1){
            if(idx < sz(tea) && i == tea[idx]){
                ++idx;
                continue;
            }
            if(tank == 0){
                res += pos;
                pos = 0;
                res += 47;
                tank = 7;
            }
            res += abs(i-pos);
            pos = i;
            res += 4;
            --tank;
        }
        res += pos;
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, long long p2)
{
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for(int i = 0; int(p1.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    TheCoffeeTimeDivOne *obj;
    long long answer;
    obj = new TheCoffeeTimeDivOne();
    clock_t startTime = clock();
    answer = obj->find(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if(hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if(hasAnswer) {
        res = answer == p2;
    }
    if(!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if(double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if(hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    vector <int> p1;
    long long p2;

    {
        // ----- test 0 -----
        p0 = 2;
        int t1[] = {1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 108ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        int t1[] = {2, 1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 59ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 15;
        int t1[] = {1, 2, 3, 4, 5, 6, 7};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 261ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 47;
        int t1[] = {1, 10, 6, 2, 4};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 891ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if(all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
