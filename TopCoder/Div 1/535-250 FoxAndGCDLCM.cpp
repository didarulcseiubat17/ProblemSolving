#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
#define fnd(v,x) (find(all((v)),(x))!=(v).end())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

const ll MAX = 100;
class FoxAndGCDLCM {
public:
    long long primepow[MAX], prime[MAX], nprimes;
    long long primepow1[MAX], prime1[MAX], nprimes1;
    void factorization(long long n) { // O(sqrt(n))
        nprimes = 0;
        long long pow = 0;
        int d = 1;
        for (long long i = 2; i * i <= n; i += d, d = 2) {
            pow = 0;
            while (!(n % i))	pow++, n /= i;
            if (pow != 0)
                primepow[nprimes] = pow, prime[nprimes++] = i;
        }
        if (n > 1)
            primepow[nprimes] = 1, prime[nprimes++] = n;
    }
    ll powr(ll n, ll p) {
            if (p == 0)	return 1;
            if (p == 1)	return n;
            ll x = powr(n, p / 2);
            x = x * x;
            if (p & 1)
                    x *= n;
            return x;
    }
    map<int,map<ll,map<ll,ll> > > memo;
    ll DP(int idx, ll a, ll b){
        if(idx == nprimes)
            return a+b;
        if(primepow[idx] == 0)
            return memo[idx][a][b] = DP(idx+1,a,b);
        if(memo[idx][a].count(b)) return memo[idx][a][b];

        ll num = powr(prime[idx], primepow[idx]);
        ll m = DP(idx+1,a*num,b);
        m = min(m, DP(idx+1,a,b*num));
        return memo[idx][a][b] = m;
    }

    long long get(long long G, long long L) {
        if(L%G) return -1;
        factorization(G);
        memo.clear();

        ll a=1;
        nprimes1 = nprimes;
        rep(i,nprimes){
            a*= powr(prime[i],primepow[i]);
            prime1[i] = prime[i];
            primepow1[i] = primepow[i];
        }

        factorization(L);
        int idx1=0,idx2=0;
        while(idx1 < nprimes1 && idx2 < nprimes){
            if(prime1[idx1] > prime[idx2]){
                ++idx2;
                continue;
            }
            primepow[idx2++] -= primepow1[idx1++];
        }

        return DP(0,a,a);
    }





};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	FoxAndGCDLCM *obj;
	long long answer;
	obj = new FoxAndGCDLCM();
	clock_t startTime = clock();
	answer = obj->get(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 2ll;
	p1 = 20ll;
	p2 = 14ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5ll;
	p1 = 8ll;
	p2 = -1ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000ll;
	p1 = 100ll;
	p2 = -1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 100ll;
	p1 = 1000ll;
	p2 = 700ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10ll;
	p1 = 950863963000ll;
	p2 = 6298430ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 3ll;
	p1 = 122110961292ll;
	p2 = 41884935ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
