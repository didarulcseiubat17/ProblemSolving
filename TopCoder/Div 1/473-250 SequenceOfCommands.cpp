#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define find(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

int dirx[] = {0, 1, 0, -1};
int diry[] = {1, 0, -1, 0};
class SequenceOfCommands
{
public:
    string whatHappens(vector <string> commands) {
        string cmd = "";
        rep(i, sz(commands)) cmd += commands[i];
        int x = 0, y = 0;
        int dir = 0;
        rep(t, 10) {

            rep(i, sz(cmd)) {
                if(cmd[i] == 'S') {
                    x += dirx[dir];
                    y += diry[dir];
                    continue;
                } else if(cmd[i] == 'L') {
                    dir = (dir - 1 + 4) % 4;
                    continue;
                } else if(cmd[i] == 'R') {
                    dir = (dir + 1) % 4;
                }
            }
            if(!x && !y && !dir) return "bounded";
        }
        return "unbounded";
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for(int i = 0; int(p0.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    SequenceOfCommands *obj;
    string answer;
    obj = new SequenceOfCommands();
    clock_t startTime = clock();
    answer = obj->whatHappens(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if(hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if(hasAnswer) {
        res = answer == p1;
    }
    if(!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if(double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if(hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    string p1;

    {
        // ----- test 0 -----
        string t0[] = {"L"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "bounded";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"SRSL"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "unbounded";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"SSSS", "R"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "bounded";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"SRSL`", "LLSSSSSSL", "SSSSSS", "L"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "unbounded";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if(all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
