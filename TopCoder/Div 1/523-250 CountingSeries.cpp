#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())


typedef long long ll;
using namespace std;

const double eps = 1e-11;
int dcmp(double a, double b)
{
     if (fabs(a-b) < eps) return 0;
     return a<b?-1:1;
}

ll powr(ll n, ll p)
{
     if(p == 0)     return 1;
     if(p == 1)     return n;
     ll x = powr(n, p / 2);
     x = x * x;
     if(p & 1)
          x *= n;
     return x;
}
class CountingSeries {
public:
     long long countThem(long long a, long long b, long long c, long long d, long long u) {
          ll x = u-a<0?-1:(u-a)/b;
          ll y;
          if ( dcmp( log(((double)u)/c) / log(d) , 0.0 ) < 0)
               y = -1;
          else if (dcmp(log(d),0) == 0)
               y=0;
          else{
               y =  (log(((double)u)/c) / log(d))+1;
               if(c*powr(d,y) > u) --y;
          }
          ll res = max(0ll,x)+max(0ll,y) + (x >= 0) + (y >= 0);
          ll pw = 1;
          ll OO = 1LL<<60;
          for (ll i = 0; i <= y; i++) {
               if ((OO / pw) < c) break;
               if ((c*pw - a) >= 0 && ((c*pw - a) % b) == 0) --res;

               if ((OO / d) < pw) break;
               pw *= d;
          }
          return res;

     }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, long long p4, bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	CountingSeries *obj;
	long long answer;
	obj = new CountingSeries();
	clock_t startTime = clock();
	answer = obj->countThem(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	long long p3;
	long long p4;
	long long p5;
	
        {
             // ----- test 8 -----
             p0 = 390406387913ll;
             p1 = 576578ll;
             p2 = 2803ll;
             p3 = 4ll;
             p4 = 734789631ll;
             p5 = 9ll;
             all_right = KawigiEdit_RunTest(8, p0, p1, p2, p3, p4, true, p5) && all_right;
             // ------------------
        }
        
	{
	// ----- test 0 -----
	p0 = 981037539735ll;
	p1 = 604741ll;
	p2 = 1640ll;
	p3 = 10ll;
	p4 = 1640000000ll;
	p5 = 7ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 720176314585ll;
	p1 = 488693376359ll;
	p2 = 514776939786ll;
	p3 = 38245ll;
	p4 = 382227406106ll;
	p5 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 2ll;
	p4 = 1000ll;
	p5 = 1000ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3ll;
	p1 = 3ll;
	p2 = 1ll;
	p3 = 2ll;
	p4 = 1000ll;
	p5 = 343ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 40ll;
	p1 = 77ll;
	p2 = 40ll;
	p3 = 100000ll;
	p4 = 40ll;
	p5 = 1ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 452ll;
	p1 = 24ll;
	p2 = 4ll;
	p3 = 5ll;
	p4 = 600ll;
	p5 = 10ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 234ll;
	p1 = 24ll;
	p2 = 377ll;
	p3 = 1ll;
	p4 = 10000ll;
	p5 = 408ll;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 867388102154ll;
	p1 = 369340281620ll;
	p2 = 588218623027ll;
	p3 = 20738ll;
	p4 = 595665623712ll;
	p5 = 1ll;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
