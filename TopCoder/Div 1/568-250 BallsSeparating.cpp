#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

int memo[52][2][2][2];
int n;
vi r, g, b;
int DP(int idx, bool boxr, bool boxg, bool boxb)
{
    if(idx == n) {
        return boxr && boxg && boxb ? 0 : 1 << 27;
    }
    int &m = memo[idx][boxr][boxg][boxb];
    if(m != -1) return m;
    m = 1 << 27;
    
    m = min(m, DP(idx + 1, 1, boxg, boxb) + g[idx] + b[idx]);
    m = min(m, DP(idx + 1, boxr, 1, boxb) + r[idx] + b[idx]);
    m = min(m, DP(idx + 1, boxr, boxg, 1) + r[idx] + g[idx]);


    return m;
}
class BallsSeparating
{
public:
    int minOperations(vector <int> red, vector <int> green, vector <int> blue) {
        n = sz(red);
        mem(memo, -1);
        r = red, g = green, b = blue;
        bool boxr = 1, boxg = 1, boxb = 1;
        rep(i, n) {
            boxr = boxr && !r[i];
            boxg = boxg && !g[i];
            boxb = boxb && !b[i];
        }
        if(n < 3 - (boxr + boxg + boxb)) return -1;
        return DP(0, boxr, boxg, boxb);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << "{";
    for(int i = 0; int(p0.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for(int i = 0; int(p1.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for(int i = 0; int(p2.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}";
    cout << "]" << endl;
    BallsSeparating *obj;
    int answer;
    obj = new BallsSeparating();
    clock_t startTime = clock();
    answer = obj->minOperations(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if(hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if(hasAnswer) {
        res = answer == p3;
    }
    if(!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if(double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if(hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    vector <int> p2;
    int p3;

    {
        // ----- test 0 -----
        int t0[] = {1, 1, 1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1, 1, 1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1, 1, 1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 6;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {6};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {8};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = -1;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {4, 6, 5, 7};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {7, 4, 6, 3};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {6, 5, 3, 8};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 37;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {7, 12, 9, 9, 7};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {7, 10, 8, 8, 9};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {8, 9, 5, 6, 13};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 77;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {842398, 491273, 958925, 849859, 771363, 67803, 184892, 391907, 256150, 75799};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {268944, 342402, 894352, 228640, 903885, 908656, 414271, 292588, 852057, 889141};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {662939, 340220, 600081, 390298, 376707, 372199, 435097, 40266, 145590, 505103};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 7230607;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if(all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
