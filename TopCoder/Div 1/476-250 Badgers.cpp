#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define find(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

vi h,g;
int tot;
class Badgers
{
public:
    bool can(int n){
        vi v(sz(h));
        rep(i,sz(v)){
            v[i] = h[i] + g[i]*(n-1);
        }
        sort(all(v));
        return accumulate(v.begin(), v.begin()+n,0) <= tot;
    }

    int feedMost(vector <int> hunger, vector <int> greed, int totalFood) {
        h = hunger;
        g = greed;
        tot =totalFood;
        int st = 0, en = sz(greed)+1;
        while(st < en) {
            int mid = (st + en) / 2;
            if(can(mid)) st = mid+1;
            else en = mid;
        }
        return st-1;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << "{";
    for(int i = 0; int(p0.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for(int i = 0; int(p1.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << p2;
    cout << "]" << endl;
    Badgers *obj;
    int answer;
    obj = new Badgers();
    clock_t startTime = clock();
    answer = obj->feedMost(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if(hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if(hasAnswer) {
        res = answer == p3;
    }
    if(!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if(double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if(hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        int t0[] = {803, 925, 256, 465, 665, 537, 896, 293, 279, 491, 31, 891, 688, 616, 722, 962, 474, 456, 589, 18, 380, 772, 925, 367, 264, 693, 741, 516, 403, 859, 394, 948, 413, 129, 684, 474, 310, 697, 569, 624, 477, 681, 891};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {244, 257, 908, 393, 5, 286, 840, 815, 798, 58, 519, 883, 112, 367, 835, 240, 648, 86, 464, 515, 673, 920, 777, 689, 565, 959, 268, 70, 575, 929, 221, 336, 102, 223, 495, 399, 49, 92, 640, 74, 52, 605, 752};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 933698;
        p3 = 43;
        all_right = KawigiEdit_RunTest(-1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }
    
    {
        // ----- test 0 -----
        int t0[] = {1, 2, 3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {2, 2, 1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 7;
        p3 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {5, 2, 1, 5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {0, 2, 4, 1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 19;
        p3 = 3;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {1, 1, 1, 1, 1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1000, 1000, 1000, 1000, 1000};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 10;
        p3 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 100;
        p3 = 5;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if(all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
