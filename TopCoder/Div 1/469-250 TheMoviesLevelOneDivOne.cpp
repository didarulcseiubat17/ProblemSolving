#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

class TheMoviesLevelOneDivOne
{
public:
    long long find(int n, int m, vector <int> row, vector <int> seat) {
        map<int, set<int> > mp;
        rep(i, sz(row)) {
            mp[row[i]].insert(seat[i]);
        }
        ll res = 0;
        repi(it, mp) {
            set<int>& st = it->second;
            int s = 0;
            repi(it2, st) {
                int place = *it2;
                res += max(0, place - s - 2);
                s = place;
            }
            res += max(0, m - s - 1);
        }
        res += 1LL * (n - sz(mp)) * (m - 1);
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, long long p4)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for(int i = 0; int(p2.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << "{";
    for(int i = 0; int(p3.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}";
    cout << "]" << endl;
    TheMoviesLevelOneDivOne *obj;
    long long answer;
    obj = new TheMoviesLevelOneDivOne();
    clock_t startTime = clock();
    answer = obj->find(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if(hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if(hasAnswer) {
        res = answer == p4;
    }
    if(!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if(double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if(hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <int> p2;
    vector <int> p3;
    long long p4;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 3;
        int t2[] = {1, 2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {2, 3};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 1ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        p1 = 3;
        int t2[] = {1, 1, 1, 2, 2, 2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1, 2, 3, 1, 2, 3};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 0ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4;
        p1 = 7;
        int t2[] = {1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 23ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 10;
        p1 = 8;
        int t2[] = {1, 9, 6, 10, 6, 7, 9, 3, 9, 2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {7, 7, 3, 3, 7, 1, 5, 1, 6, 2};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 54ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if(all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
