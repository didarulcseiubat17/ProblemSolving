#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

string str;
int tar;
bool can(int msk, bool turn)
{
    if(turn == 0) {
        rep(i, tar) {
            int clr = str[i] - 'A';
            if((msk >> clr) & 1) continue;
            return 0;
        }
        return 1;
    }
    if(turn == 1) {
        repd(i, sz(str) - 1, tar, 1) {
            int clr = str[i] - 'A';
            if((msk >> clr) & 1) continue;
            return 0;
        }
        return 1;
    }
}
int memo[1<<18][2][2];
class DoorsGame
{
public:
    int DP(int msk, bool turn, int who) {
        bool yes1 = can(msk,0);
        bool yes2 = can(msk,1);
        if(yes1 && yes2) return 0;
        if(yes1 && who == 0) return 0;
        if(yes2 && who == 1) return 0;
        if(yes1 || yes2) return 1<<27;
        int& m = memo[msk][turn][who];
        if(m != -1) return m;
        m = turn == who? 1<<27: -1<<27;
        rep(i,16){
            char c = i+'A';
            if(myfind(str,c) == sz(str)) continue;
            if((msk>>i) & 1) continue;
            if(who == turn)
                m = min(m, DP(msk | (1<<i), !turn, who)+1);
            else
                m = max(m, DP(msk | (1<<i), !turn, who)+1);
        }
        return m;
    }
    int determineOutcome(string doors, int trophy) {
        str = doors;
        tar = trophy;
        mem(memo,-1);
        int c1 = DP(0,0,0);
        int c2 = DP(0,0,1);
        if(c1 == c2) return 0;
        return c1<c2?c1:-c2;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	DoorsGame *obj;
	int answer;
	obj = new DoorsGame();
	clock_t startTime = clock();
	answer = obj->determineOutcome(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "ABCD";
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ABCC";
	p1 = 2;
	p2 = -2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ABABAB";
	p1 = 3;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ABAPDCAA";
	p1 = 5;
	p2 = -4;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "MOCFDCE";
	p1 = 3;
	p2 = 5;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "ABCCDE";
	p1 = 3;
	p2 = 0;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "ABCCD";
	p1 = 3;
	p2 = 0;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
