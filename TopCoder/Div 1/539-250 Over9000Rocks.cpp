#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
#define fnd(v,x) (find(all((v)),(x))!=(v).end())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;


class Over9000Rocks {
public:

    vi lb,up;
    map<int,map<int,vector<pii> > > memo;
    vector<pii> merge(vector<pii> lines) {
        if(lines.empty()) return lines;
        sort(lines.begin(), lines.end());
        pii cur(lines[0].first, lines[0].second);
        vector<pii> ret;
        for (int i = 1; i < sz(lines); ++i) {
            if (lines[i].first >= cur.first && lines[i].first <= cur.second) {
                if (lines[i].second > cur.second)
                    cur.second = lines[i].second;
            }
            else if (lines[i].first > cur.second) {
                ret.push_back(cur);
                cur = lines[i];
            }
        }
        ret.push_back(cur);
        return ret;
    }
    vector<pii> DP(int idx, int msk){
        if(idx == sz(lb)){
            int lw=0,hi=0;
            rep(i,sz(lb))
                if( msk&(1<<i))
                    lw += lb[i], hi += up[i];

            int st = max(lw-1,9000);
            vector<pii> res;
            if(hi > st)
                res.push_back(mp(st,hi));
            return res;
        }


        if(memo[idx].count(msk)) return memo[idx][msk];

        vector<pii> v1 = DP(idx+1,msk);
        vector<pii> v2 = DP(idx+1,msk | (1<<idx));
        v1.insert(v1.end(),all(v2));
        vector<pii> res = merge(v1);

        return memo[idx][msk]=res;
    }

    int countPossibilities(vector <int> lowerBound, vector <int> upperBound) {
        lb = lowerBound, up = upperBound;
        vector<pii> r = DP(0,0);
        int cnt=0;
        rep(i,sz(r)) cnt += r[i].second-r[i].first;
        return cnt;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    Over9000Rocks *obj;
    int answer;
    obj = new Over9000Rocks();
    clock_t startTime = clock();
    answer = obj->countPossibilities(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    int p2;

    {
	// ----- test 0 -----
	int t0[] = {9000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9001};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 1 -----
	int t0[] = {9000,1,10};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9000,2,20};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 15;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 2 -----
	int t0[] = {1001,2001,3001,3001};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1003,2003,3003,3003};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 3 -----
	int t0[] = {9000,90000,1,10};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9000,90000,3,15};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 38;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 4 -----
	int t0[] = {1,1,1,1,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,4,5,6,7,8};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
