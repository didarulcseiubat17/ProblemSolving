#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
#define fnd(v,x) (find(all((v)),(x))!=(v).end())
typedef long long ll;
using namespace std;

int old[17],sor[17];
int memo[(1<<17) + 9][17][2];
int len;
vi rest;
class KingdomAndPassword {
public:
    inline ll labs(ll x){
        return x<0?-x:x;
    }

    int lower(int bit, int idx, bool lwr){
        if(idx == len)
            return 1;
        int& m = memo[bit][idx][lwr];
        if(m != -1) return m;

        for (int i = len-1; i >= 0; --i) {
            int dig = sor[i];
            if(bit & (1 << i) || rest[idx] == dig) continue;
            if(!lwr && dig > old[idx]) continue;
            if(lower( bit | (1<<i) , idx+1, lwr || (dig < old[idx]) ))
                return m = 1;
        }
        return m=0;
    }

    void build_lower(int bit, int idx, bool lwr, ll& build){
        if(idx == len)
            return;

        for (int i = len-1; i >= 0; --i) {
            int dig = sor[i];
            if(bit & (1 << i) || rest[idx] == dig) continue;
            if(!lwr && dig > old[idx]) continue;
            if(lower( bit | (1<<i) , idx+1, lwr || (dig < old[idx]) )){
                build = build*10 + dig;
                build_lower( bit | (1<<i) , idx+1, lwr || (dig < old[idx]),build );
                return;
            }
        }
    }

    //clr tany

    int upper(int bit, int idx, bool upr){
        if(idx == len)
            return 1;
        int& m = memo[bit][idx][upr];
        if(m != -1) return m;

        for (int i = 0; i < len; ++i) {
            int dig = sor[i];
            if(bit & (1 << i) || rest[idx] == dig) continue;
            if(!upr && dig < old[idx]) continue;
            if(upper( bit | (1<<i) , idx+1, upr || (dig > old[idx]) ))
                return m = 1;
        }
        return m=0;
    }

    void build_upr(int bit, int idx, bool upr, ll& build){
        if(idx == len)
            return;

        for (int i = 0; i < len; ++i) {
            int dig = sor[i];
            if(bit & (1 << i) || rest[idx] == dig) continue;
            if(!upr && dig < old[idx]) continue;
            if(upper( bit | (1<<i) , idx+1, upr || (dig > old[idx]) )){
                build = build*10 + dig;
                build_upr( bit | (1<<i) , idx+1, upr || (dig > old[idx]),build );
                return;
            }
        }
    }

    long long newPassword(long long oldPassword, vector <int> restrictedDigits) {
        ll tmp = oldPassword;
        len = 0;
        rest = restrictedDigits;
        while(tmp){
            old[len] = tmp%10;
            sor[len] = old[len];
            tmp /= 10;
            ++len;
        }
        reverse(old, old+len);
        sort(sor,sor+len);
        //check if same is valid
        bool ok=1;
        rep(i,sz(rest)){
            if(rest[i] == old[i]) {
                ok = 0;
                break;
            }
        }
        if(ok) return oldPassword;

        ll lwr=0,upr=0;
        //get smaller
        mem(memo,-1);
        int islwr = lower(0,0,0);
        build_lower(0,0,0,lwr);
        //get upper
        mem(memo,-1);
        int isupr = upper(0,0,0);
        build_upr(0,0,0,upr);

        if(!islwr && !isupr) return -1;
        else if(!islwr) return upr;
        else if(!isupr) return lwr;
        if(labs(oldPassword - lwr) < labs(oldPassword- upr)) return lwr;
        if(labs(oldPassword - lwr) > labs(oldPassword - upr)) return upr;
        return lwr;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, vector <int> p1, bool hasAnswer, long long p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    KingdomAndPassword *obj;
    long long answer;
    obj = new KingdomAndPassword();
    clock_t startTime = clock();
    answer = obj->newPassword(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    long long p0;
    vector <int> p1;
    long long p2;

    {
        // ----- test 0 -----
        p0 = 3941ll;
        int t1[] = {5,9,5,5};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 4139ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 0 -----
        p0 = 6684ll;
        int t1[] = {4,6,8,6};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 6864ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }


    {
        // ----- test 4 -----
        p0 = 241529363573463ll;
        int t1[] = {1,4,5,7,3,9,8,1,7,6,3,2,6,4,5};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 239676554423331ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }


    {
        // ----- test 0 -----
        p0 = 548ll;
        int t1[] = {5,1,8};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 485ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 7777ll;
        int t1[] = {4,7,4,7};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = -1ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 58ll;
        int t1[] = {4,7};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 58ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 172ll;
        int t1[] = {4,7,4};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 127ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }



    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
