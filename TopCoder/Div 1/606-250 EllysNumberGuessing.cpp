#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

const int x = 1000000000;
class EllysNumberGuessing {
public:
     int getNumber(vector <int> guesses, vector <int> answers) {
          vi w,res(2);
          if (guesses[0]-answers[0] >= 1)
               w.push_back(guesses[0]-answers[0]);
          if (guesses[0]+answers[0] <= x)
               w.push_back(guesses[0]+answers[0]);
          repa(i,1,sz(guesses)-1,1) {
               vi s;
               if (guesses[i]-answers[i] >= 1)
                    s.push_back(guesses[i]-answers[i]);
               if (guesses[i]+answers[i] <= x)
                    s.push_back(guesses[i]+answers[i]);
               auto it = set_intersection(all(s), all(w), res.begin());
               res.resize(it-res.begin());
               w = res;
          }
          if (sz(w) == 0) return -2;
          if (sz(w) == 1) return *w.begin();
          else return -1;

     }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2)
{
     cout << "Test " << testNum << ": [" << "{";
     for (int i = 0; int(p0.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p0[i];
     }
     cout << "}" << "," << "{";
     for (int i = 0; int(p1.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p1[i];
     }
     cout << "}";
     cout << "]" << endl;
     EllysNumberGuessing *obj;
     int answer;
     obj = new EllysNumberGuessing();
     clock_t startTime = clock();
     answer = obj->getNumber(p0, p1);
     clock_t endTime = clock();
     delete obj;
     bool res;
     res = true;
     cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
     if (hasAnswer) {
          cout << "Desired answer:" << endl;
          cout << "\t" << p2 << endl;
     }
     cout << "Your answer:" << endl;
     cout << "\t" << answer << endl;
     if (hasAnswer) {
          res = answer == p2;
     }
     if (!res) {
          cout << "DOESN'T MATCH!!!!" << endl;
     } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
          cout << "FAIL the timeout" << endl;
          res = false;
     } else if (hasAnswer) {
          cout << "Match :-)" << endl;
     } else {
          cout << "OK, but is it right?" << endl;
     }
     cout << "" << endl;
     return res;
}
int main()
{
     bool all_right;
     all_right = true;

     vector <int> p0;
     vector <int> p1;
     int p2;

     {
          // ----- test 0 -----
          int t0[] = {600,594};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {6,12};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 606;
          all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 1 -----
          int t0[] = {100,50,34,40};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {58,8,8,2};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 42;
          all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 2 -----
          int t0[] = {500000,600000,700000};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {120013,220013,79987};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = -2;
          all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 3 -----
          int t0[] = {500000000};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {133742666};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = -1;
          all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 4 -----
          int t0[] = {76938260,523164588,14196746,296286419,535893832,41243148,364561227,270003278,472017422,367932361,395758413,301278456,186276934,316343129,336557549,52536121,98343562,356769915,89249181,335191879};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {466274085,20047757,529015599,246925926,7318513,501969197,178651118,273209067,71194923,175279984,147453932,241933889,356935411,226869216,206654796,490676224,444868783,186442430,453963164,208020466};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 543212345;
          all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 5 -----
          int t0[] = {42};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {42};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 84;
          all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 6 -----
          int t0[] = {999900000};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {100001};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 999799999;
          all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
          // ------------------
     }

     if (all_right) {
          cout << "You're a stud (at least on the example cases)!" << endl;
     } else {
          cout << "Some of the test cases had errors." << endl;
     }
     return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
