#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;
//558
string str;
int stampcost, pushcost;
string rgb = "RGB*";
class Stamp
{
public:
    int memo[51][51][4];
    int DP(int len, int idx, int clr) {
        if(idx >= sz(str)) return 0;
        if(idx + len > sz(str)) return 1 << 27;
        int &m = memo[len][idx][clr];
        if(m != -1) return m;

        int lim = min(sz(str), idx + len) - 1;
        int tclr = clr, i;
        m = 1 << 27;
        for(i = idx; i <= lim; i++) {
            if(str[i] == '*') continue;
            int fclr = myfind(rgb, str[i]);
            if(tclr == 3 || fclr == 3) {
                tclr = fclr;
                continue;
            }
            if(tclr != fclr) break;
        }
        
        if(i <= lim) return m = 1<<27;
        for(i=idx+1; i <= lim; i++)
            m = min(m, DP(len,i,tclr)+pushcost);
        return m=min(m,DP(len,i,3)+pushcost);
    }
    int getMinimumCost(string desiredColor, int stampCost, int pushCost) {
        mem(memo, -1);
        stampcost = stampCost, pushcost = pushCost;
        str = desiredColor;
        int res = 1 << 27;
        repa(i, 1, sz(desiredColor), 1) {
            res = min(res, DP(i, 0, 3) + stampCost * i);
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
    cout << "]" << endl;
    Stamp *obj;
    int answer;
    obj = new Stamp();
    clock_t startTime = clock();
    answer = obj->getMinimumCost(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if(hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if(hasAnswer) {
        res = answer == p3;
    }
    if(!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if(double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if(hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    int p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        p0 = "RRGGBB";
        p1 = 1;
        p2 = 1;
        p3 = 5;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "R**GB*";
        p1 = 1;
        p2 = 1;
        p3 = 5;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "BRRB";
        p1 = 2;
        p2 = 7;
        p3 = 30;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "R*RR*GG";
        p1 = 10;
        p2 = 58;
        p3 = 204;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "*B**B**B*BB*G*BBB**B**B*";
        p1 = 5;
        p2 = 2;
        p3 = 33;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "*R*RG*G*GR*RGG*G*GGR***RR*GG";
        p1 = 7;
        p2 = 1;
        p3 = 30;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "RR*GG";
        p1 = 1;
        p2 = 100000;
        p3 = 300002;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }
    
    {
        // ----- test 5 -----
        p0 = "*R*G*G*B*";
        p1 = 5;
        p2 = 2;
        p3 = 20;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if(all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
