#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

int mod = 1000000009;
const int SIZE = 2010, OO = 1 << 27;
vector<vector<pair<int,int> > > adjlst;
int n;
int dist[SIZE], rdist[SIZE];
bool vis[SIZE];
void DijkstraWithHeap(int src, int dist[])
{
     mem(vis,0);
     fill(dist, dist + n, OO);
     dist[src] = 0;
     priority_queue<pair<int,int>, vector< pair<int,int> >, greater< pair<int,int> > > q;
     q.push(make_pair(0, src));
     while (q.size()) {
          src = q.top().second;
          int cst = q.top().first;
          q.pop();
          if (cst != dist[src])
               continue;
          vis[src] = 1;
          for (auto it = adjlst[src].begin(); it != adjlst[src].end(); ++it) {
               int nxt = it->second, nxtc = it->first;
               if (!vis[nxt] && dist[nxt] > dist[src] + nxtc) {
                    dist[nxt] = dist[src] + nxtc;
                    q.push(make_pair(dist[nxt], nxt));
               }
          }
     }

}

int memo[SIZE];
int goal;
int DP(int idx)
{
     if (idx == goal) return 1;
     int& m = memo[idx];
     if (m != -1) return m;
     m = 0;
     for (pii nxt: adjlst[idx]) {
          if (dist[idx] + nxt.first + rdist[nxt.second] == dist[goal]){
                    m += DP(nxt.second);
                    m %= mod;
          }
     }
          return m;
}

class DrivingPlans {
public:
int count(int N, vector <int> A, vector <int> B, vector <int> C) {
          n = N;
          goal = --N;
          adjlst = vector<vector<pii> >(n);
          rep(i,sz(A)) {
               adjlst[--A[i]].emplace_back(C[i],--B[i]);
               adjlst[B[i]].emplace_back(C[i],A[i]);
          }
          DijkstraWithHeap(0,dist);
          DijkstraWithHeap(N,rdist);

          rep(i,sz(A)) {
               if (C[i] == 0) {
                    if(dist[A[i]] + C[i] + rdist[B[i]] == dist[N]) return -1;
                    if(dist[B[i]] + C[i] + rdist[A[i]] == dist[N]) return -1;
               }
          }
          mem(memo,-1);
          return DP(0);
     }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4)
{
     cout << "Test " << testNum << ": [" << p0 << "," << "{";
     for (int i = 0; int(p1.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p1[i];
     }
     cout << "}" << "," << "{";
     for (int i = 0; int(p2.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p2[i];
     }
     cout << "}" << "," << "{";
     for (int i = 0; int(p3.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p3[i];
     }
     cout << "}";
     cout << "]" << endl;
     DrivingPlans *obj;
     int answer;
     obj = new DrivingPlans();
     clock_t startTime = clock();
     answer = obj->count(p0, p1, p2, p3);
     clock_t endTime = clock();
     delete obj;
     bool res;
     res = true;
     cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
     if (hasAnswer) {
          cout << "Desired answer:" << endl;
          cout << "\t" << p4 << endl;
     }
     cout << "Your answer:" << endl;
     cout << "\t" << answer << endl;
     if (hasAnswer) {
          res = answer == p4;
     }
     if (!res) {
          cout << "DOESN'T MATCH!!!!" << endl;
     } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
          cout << "FAIL the timeout" << endl;
          res = false;
     } else if (hasAnswer) {
          cout << "Match :-)" << endl;
     } else {
          cout << "OK, but is it right?" << endl;
     }
     cout << "" << endl;
     return res;
}
int main()
{
     bool all_right;
     all_right = true;

     int p0;
     vector <int> p1;
     vector <int> p2;
     vector <int> p3;
     int p4;

     {
          // ----- test 1 -----
          p0 = 4;
          int t1[] = {1,2,1};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          int t2[] = {2,3,4};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {1,1,0};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = -1;
          all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 1 -----
          p0 = 4;
          int t1[] = {1,1,2,3};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          int t2[] = {2,3,4,4};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {1,1,1,0};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = -1;
          all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 0 -----
          p0 = 4;
          int t1[] = {1,1,2,3};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          int t2[] = {2,3,4,4};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {1,1,1,1};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = 2;
          all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }

     

     {
          // ----- test 2 -----
          p0 = 7;
          int t1[] = {1,1,2,3,4,4,5,6};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          int t2[] = {2,3,4,4,5,6,7,7};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {1,1,2,2,3,3,4,4};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = 4;
          all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }

     if (all_right) {
          cout << "You're a stud (at least on the example cases)!" << endl;
     } else {
          cout << "Some of the test cases had errors." << endl;
     }
     return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
