#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

class ORSolitaire {
public:
     int getMinimum(vector <int> numbers, int goal) {
          int mn = 1<<27;
          int mxlen = log2(goal)+1;
          rep(i,sz(numbers)) mxlen = max(mxlen, int(log2(numbers[i])+1));
          for(int len = 0; len <= mxlen ; len++){
               int bit = (goal>>len)&1;
               if(!bit) continue;
               vi keep;
               int cnt=0;
               rep(i,sz(numbers)){
                    int b = (numbers[i]>>len)&1;
                    if(!b) continue;
                    bool yes=1;
                    rep(l,mxlen){
                         if(((goal>>l)&1) == 0 &&  ((numbers[i]>>l)&1) == 1){
                              yes=0;
                              break;
                         }
                    }
                    cnt += yes;
               }
               mn = min(mn, cnt);
               
          }
          return mn;
     }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2)
{
     cout << "Test " << testNum << ": [" << "{";
     for (int i = 0; int(p0.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p0[i];
     }
     cout << "}" << "," << p1;
     cout << "]" << endl;
     ORSolitaire *obj;
     int answer;
     obj = new ORSolitaire();
     clock_t startTime = clock();
     answer = obj->getMinimum(p0, p1);
     clock_t endTime = clock();
     delete obj;
     bool res;
     res = true;
     cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
     if (hasAnswer) {
          cout << "Desired answer:" << endl;
          cout << "\t" << p2 << endl;
     }
     cout << "Your answer:" << endl;
     cout << "\t" << answer << endl;
     if (hasAnswer) {
          res = answer == p2;
     }
     if (!res) {
          cout << "DOESN'T MATCH!!!!" << endl;
     } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
          cout << "FAIL the timeout" << endl;
          res = false;
     } else if (hasAnswer) {
          cout << "Match :-)" << endl;
     } else {
          cout << "OK, but is it right?" << endl;
     }
     cout << "" << endl;
     return res;
}
int main()
{
     bool all_right;
     all_right = true;

     vector <int> p0;
     int p1;
     int p2;

     {
          // ----- test 0 -----
          int t0[] = {1,2,4};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          p1 = 7;
          p2 = 1;
          all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 1 -----
          int t0[] = {1,2,4,7,8};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          p1 = 7;
          p2 = 2;
          all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 2 -----
          int t0[] = {12571295,2174218,2015120};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          p1 = 1;
          p2 = 0;
          all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 3 -----
          int t0[] = {5,2,4,52,62,9,8,3,1,11,6};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          p1 = 11;
          p2 = 3;
          all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 4 -----
          int t0[] = {503,505,152,435,491,512,1023,355,510,500,502,255,63,508,509,511,60,250,254,346};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          p1 = 510;
          p2 = 5;
          all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
          // ------------------
     }

     if (all_right) {
          cout << "You're a stud (at least on the example cases)!" << endl;
     } else {
          cout << "Some of the test cases had errors." << endl;
     }
     return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
