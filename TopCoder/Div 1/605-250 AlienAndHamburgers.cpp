#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

class AlienAndHamburgers {
public:
     int getNumber(vector <int> type, vector <int> taste) {
          vector<pii> v(sz(type));
          rep(i,sz(v))
          v[i]= mp(taste[i],type[i]);
          
          sort(rall(v));
          set<int> t;
          int sum = 0;
          rep(i,sz(v)){
               if(v[i].first >= 0){
                    t.insert(v[i].second);
                    sum += v[i].first;
               }
               else{
                    if(t.count(v[i].second)) continue;
                    int cur = sz(t)*sum;
                    int nxt = (sz(t)+1)*(sum+v[i].first);
                    if(nxt >= cur){
                         sum += v[i].first;
                         t.insert(v[i].second);
                    }
               }
          }
          return sum*sz(t);

     }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2)
{
     cout << "Test " << testNum << ": [" << "{";
     for (int i = 0; int(p0.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p0[i];
     }
     cout << "}" << "," << "{";
     for (int i = 0; int(p1.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p1[i];
     }
     cout << "}";
     cout << "]" << endl;
     AlienAndHamburgers *obj;
     int answer;
     obj = new AlienAndHamburgers();
     clock_t startTime = clock();
     answer = obj->getNumber(p0, p1);
     clock_t endTime = clock();
     delete obj;
     bool res;
     res = true;
     cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
     if (hasAnswer) {
          cout << "Desired answer:" << endl;
          cout << "\t" << p2 << endl;
     }
     cout << "Your answer:" << endl;
     cout << "\t" << answer << endl;
     if (hasAnswer) {
          res = answer == p2;
     }
     if (!res) {
          cout << "DOESN'T MATCH!!!!" << endl;
     } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
          cout << "FAIL the timeout" << endl;
          res = false;
     } else if (hasAnswer) {
          cout << "Match :-)" << endl;
     } else {
          cout << "OK, but is it right?" << endl;
     }
     cout << "" << endl;
     return res;
}
int main()
{
     bool all_right;
     all_right = true;

     vector <int> p0;
     vector <int> p1;
     int p2;

     {
          // ----- test 0 -----
          int t0[] = {1,2};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {4,7};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 22;
          all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 1 -----
          int t0[] = {1,1};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {-1,-1};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 0;
          all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 2 -----
          int t0[] = {1,2,3};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {7,4,-1};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 30;
          all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 3 -----
          int t0[] = {1,2,3,2,3,1,3,2,3,1,1,1};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {1,7,-2,3,-4,-1,3,1,3,-5,-1,0};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 54;
          all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
          // ------------------
     }

     {
          // ----- test 4 -----
          int t0[] = {30,20,10};
          p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
          int t1[] = {100000,-100000,100000};
          p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
          p2 = 400000;
          all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
          // ------------------
     }

     if (all_right) {
          cout << "You're a stud (at least on the example cases)!" << endl;
     } else {
          cout << "Some of the test cases had errors." << endl;
     }
     return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
