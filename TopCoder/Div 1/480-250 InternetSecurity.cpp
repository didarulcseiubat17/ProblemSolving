#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;

bool vis[55];
class InternetSecurity
{
public:
    vector <string> determineWebsite(vector <string> address, vector <string> keyword, vector <string> dangerous, int threshold) {
        mem(vis,0);
        vector<vs> lst(sz(address));
        rep(i, sz(keyword)) {
            sstr ss(keyword[i]);
            string str;
            while(ss >> str) {
                lst[i].push_back(str);
            }
        }
        vi res;
        set<string> dang(all(dangerous));
        
        bool yes = 1;
        int x=0;
        while(yes) {
            yes = 0;
            cout << (++x);
            set<string> tmp = dang;
            rep(i, sz(lst)) {
                if(vis[i]) continue;
                int cnt = 0;
                rep(j, sz(lst[i])) {
                    cnt += dang.count(lst[i][j]);
                    if(cnt >= threshold) {
                        res.push_back(i);
                        vis[i] = 1;
                        mark(lst[i], tmp);
                        yes = 1;
                        break;
                    }
                }
            }
            dang = tmp;
        }
        sort(all(res));
        vs strres(sz(res));
        rep(i, sz(res)) {
            strres[i] = address[res[i]];
        }
        return strres;
    }
    void mark(vector< string >& w, set< string >& tmp) {
        rep(i, sz(w)) {
            tmp.insert(w[i]);
        }
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, int p3, bool hasAnswer, vector <string> p4)
{
    cout << "Test " << testNum << ": [" << "{";
    for(int i = 0; int(p0.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for(int i = 0; int(p1.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}" << "," << "{";
    for(int i = 0; int(p2.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}" << "," << p3;
    cout << "]" << endl;
    InternetSecurity *obj;
    vector <string> answer;
    obj = new InternetSecurity();
    clock_t startTime = clock();
    answer = obj->determineWebsite(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if(hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for(int i = 0; int(p4.size()) > i; ++i) {
            if(i > 0) {
                cout << ",";
            }
            cout << "\"" << p4[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for(int i = 0; int(answer.size()) > i; ++i) {
        if(i > 0) {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if(hasAnswer) {
        if(answer.size() != p4.size()) {
            res = false;
        } else {
            for(int i = 0; int(answer.size()) > i; ++i) {
                if(answer[i] != p4[i]) {
                    res = false;
                }
            }
        }
    }
    if(!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if(double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if(hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    vector <string> p2;
    int p3;
    vector <string> p4;

    {
        // ----- test 0 -----
        string t0[] = {"www.topcoder.com", "www.sindicate_of_evil.com", "www.happy_citizens.com"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"hack encryption decryption internet algorithm", "signal interference evil snake poison algorithm", "flower baloon topcoder blue sky sea"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"hack", "encryption", "decryption", "interference", "signal", "internet"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 3;
        string t4[] = {"www.topcoder.com", "www.sindicate_of_evil.com"};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"brokenlink", "flowerpower.net", "purchasedomain.com"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"broken", "rose tulips", "cheap free domain biggest greatest"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"biggest", "enemy", "hideout"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"a..a.ab.", "...aa.b"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"a bc def", "def ghij klmno"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"a", "b", "c", "d", "e"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        string t4[] = {"a..a.ab.", "...aa.b"};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"www.tsa.gov"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"information assurance signal intelligence research"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"signal", "assurance", "penguin"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        string t4[] = {"www.tsa.gov"};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if(all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
