#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <climits>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define allarr(n) (n), (n)+( (sizeof (n)) / (sizeof (*n)) )
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
typedef long long ll;
using namespace std;

typedef ll T;

struct node {
	static node* empty;
	node* left, *right;
	T val;
	int pri, size, freq;
	bool bad;
	node() {
		mem(this,0);
		left = right = this;
		pri = INT_MAX;
	}

	node(T v) {
		val = v;
		left = right = empty;
		bad = 0;
		pri = rand() - 1;
		size = freq = 1;
	}
	void update() {
		size = left->getSize() + right->getSize() + freq;
		bad = 0;
	}
	int getSize() {
		if (bad)
			update();
		return size;
	}

	T getValue(int idx) {
		if (idx < left->getSize())
			return left->getValue(idx);
		if (idx >= left->getSize() + freq)
			return right->getValue(idx - left->getSize() - freq);
		return val;
	}

};

node* node::empty = new node;

node* rotateRight(node* root) {
	node* l = root->left;
	root->left = l->right;
	l->right = root;
	l->bad = root->bad = 1;
	return l;
}

node* rotateLeft(node* root) {
	node* r = root->right;
	root->right = r->left;
	r->left = root;
	r->bad = root->bad = 1;
	return r;
}

node* balance(node* root) {
	if (root->left->pri < root->pri)
		root = rotateRight(root);
	else if (root->right->pri < root->pri)
		root = rotateLeft(root);

	return root;
}

node* insert(node* root, T val) {
	if (root == node::empty)
		return new node(val);

	if (root->val == val) {
		++root->freq, ++root->size;
		return root;
	}

	if (val < root->val)
		root->left = insert(root->left, val);
	else
		root->right = insert(root->right, val);

	root->bad=1;
	return balance(root);
}

node* del(node* root, T val) {
	if (root == node::empty)
		return root;

	root->bad = 1;
	if (root->val == val) {
		if (root->freq > 1) {
			--root->freq;
			return root;
		}

		if (root->right == node::empty) {
			root = root->left;
			return root;
		}

		if (root->left == node::empty) {
			root = root->right;
			return root;
		}

		if (root->left->pri < root->right->pri)
			root = rotateRight(root);
		else
			root = rotateLeft(root);

		root = del(root, val);
		return root;
	}

	if (val < root->val)
		root->left = del(root->left, val);
	else
		root->right = del(root->right, val);
	return root;
}

inline int generate(ll& t, int& mul, int& add) {
	ll val = ((ll)t) * mul;
	return (val + add) % 65536;
}
class FloatingMedian {
public:
	long long sumOfMedians(int seed, int mul, int add, int N, int K) {
		node* rt = node::empty;
		rt = insert(rt, seed);
		ll t = seed;
		vector<ll> num;
		num.push_back(t);
		reps(k,1, K) {
			t = generate(t, mul, add);
			rt = insert(rt, t);
			num.push_back(t);
		}

		int mid = (K-1) / 2;
		ll sum = rt->getValue(mid);
		int idx = 0;
		reps(i,K,N) {
			rt = del(rt, num[idx++]);
			t = generate(t, mul, add);
			rt = insert(rt, t);
			num.push_back(t);
			sum += rt->getValue(mid);
		}

		return sum;

	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4,
		bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << ","
			<< p3 << "," << p4;
	cout << "]" << endl;
	FloatingMedian *obj;
	long long answer;
	obj = new FloatingMedian();
	clock_t startTime = clock();
	answer = obj->sumOfMedians(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	long long p5;

	{
		// ----- test 0 -----
		p0 = 3;
		p1 = 1;
		p2 = 1;
		p3 = 10;
		p4 = 3;
		p5 = 60ll;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 10;
		p1 = 0;
		p2 = 13;
		p3 = 5;
		p4 = 2;
		p5 = 49ll;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 4123;
		p1 = 2341;
		p2 = 1231;
		p3 = 7;
		p4 = 3;
		p5 = 102186ll;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 47;
		p1 = 5621;
		p2 = 1;
		p3 = 125000;
		p4 = 1700;
		p5 = 4040137193ll;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 32321;
		p1 = 46543;
		p2 = 32552;
		p3 = 17;
		p4 = 17;
		p5 = 25569ll;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
