#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
typedef long long ll;
using namespace std;

class TraditionalMarriage {
public:
	vector<vs> items;
	vector<int> w;
	int memo[60][2][2][2][2];
	int n;
	int DP(int i, bool old, bool nw, bool bor, bool blue) {
		if (i == n) {
			if (old && nw && bor && blue)
				return 0;
			return 1e9;
		}

		int &m = memo[i][old][nw][bor][blue];
		if (m != -1)
			return m;

		int c1 = DP(i + 1, old, nw, bor, blue);

		bool b1 = old, b2 = nw, b3 = bor, b4 = blue;
		fo(j,items[i].size()) {

			if (items[i][j] == "old")
				b1 = 1;
			else if (items[i][j] == "new")
				b2 = 1;
			else if (items[i][j] == "borrowed")
				b3 = 1;
			else if (items[i][j] == "blue")
				b4 = 1;
		}

		int c2 = DP(i+1, b1,b2,b3,b4) + w[i];
		
		return m = min(c1,c2);

	}
	int getLuckyItems(vector<string> properties, vector<int> weight) {
		memset(memo, -1, sizeof memo);
		items.clear();
		n = weight.size();
		w = weight;
		items.resize(n);

		fo(i,properties.size()) {
			int pos = 0;
			while ((pos = properties[i].find(',', pos)) != -1)
				properties[i][pos] = ' ', pos++;
		}
		fo(i,properties.size()) {
			stringstream ss(properties[i]);
			string s;
			while (ss >> s) {
				if (s == "old" || s == "new" || s == "borrowed" || s == "blue")
					items[i].push_back(s);
			}
		}

		int res= DP(0,0,0,0,0);
		return (res==1e9)?-1:res;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<string> p0, vector<int> p1,
		bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	TraditionalMarriage *obj;
	int answer;
	obj = new TraditionalMarriage();
	clock_t startTime = clock();
	answer = obj->getLuckyItems(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<string> p0;
	vector<int> p1;
	int p2;

	{
		// ----- test 0 -----
		string t0[] = { "blue,suede,old", "red", "white,borrowed",
				"new,white,cool,good,anything", "new" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 10, 4, 15, 3, 4 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 28;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "new,borrowed,blue,old,nice" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "old", "new", "borrowed", "blue",
				"old,new,borrowed,blue" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 1, 1, 1, 5 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "new", "old,red", "borrowed" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 2, 3 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = -1;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
