#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()

using namespace std;

void print(vector<string> v) {
	fo(i,v.size()) {
		cout << v[i] << endl;
	}
	cout << "\n\n";
}
class TeamSelection {
public:

	int selectBestTeam(vector<int> rating, vector<string> com) {

		int mx = -1, bi = -1, bj = -1, bk = -1;
		fo(i,com.size())
			foo(j,i+1,com.size())
				foo(k,j+1,com.size())
					if (com[i][j] == 'Y' && com[i][k] == 'Y' && com[j][k]
							== 'Y') {
						if (mx < rating[i] + rating[j] + rating[k]) {
							mx = rating[i] + rating[j] + rating[k];
							bi = i, bj = j, bk = k;
						}

					}

		return mx;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, vector<string> p1,
		bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TeamSelection *obj;
	int answer;
	obj = new TeamSelection();
	clock_t startTime = clock();
	answer = obj->selectBestTeam(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<int> p0;
	vector<string> p1;
	int p2;

	{
		// ----- test 0 -----
		int t0[] = { 1, 2, 3, 4 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "YYYY", "YYYY", "YYYY", "YYYY" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 9;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 1, 2, 3 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "YNN", "NYN", "NNY" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 1, 2, 3, 4 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "YYNN", "YYNN", "NNYY", "NNYY" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = -1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 750, 911, 451, 578, 337, 894, 549, 620, 509, 672, 465,
				562, 138, 939, 113 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "YYNYYYNYNYYNYNN", "YYNYNYNNYNNNYYY",
				"NNYNYNNNYNNYNNY", "YYNYYYYNYNNYYNN", "YNYYYNNNNYNYYNY",
				"YYNYNYYYYNYYNYY", "NNNYNYYYYYNYYYN", "YNNNNYYYYYNYYNN",
				"NYYYNYYYYNYYYYY", "YNNNYNYYNYNNNNY", "YNNNNYNNYNYYYNN",
				"NNYYYYYYYNYYNYY", "YYNYYNYYYNYNYYY", "NYNNNYYNYNNYYYY",
				"NYYNYYNNYYNYYYY" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 2744;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { 1, 2, 3, 4, 5, 6 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "YYYNNN", "YYYNNN", "YYYNNN", "NNNYYY", "NNNYYY",
				"NNNYYY" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 21;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
