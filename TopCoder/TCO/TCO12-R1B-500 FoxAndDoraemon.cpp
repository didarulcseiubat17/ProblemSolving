#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
#define fnd(v,x) (find(all((v)),(x))!=(v).end())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;


class FoxAndDoraemon {
public:
    vi wc;
    int sc;
    int memo[52][102];
    int DP(int idx, int foxes){
        if(idx == sz(wc)) return 0;
        if(foxes >= sz(wc)*2 || foxes==0) return 1<<27;
        int& m = memo[idx][foxes];
        if(m != -1) return m;

        int mn = 1<<27;
        repe(i,0,min(foxes,sz(wc)-idx)){ // i working
            int dup = foxes-i;
            int mxwork=0;
            rep(j,i)    mxwork = max(mxwork, wc[idx+j]);
            int time = max(mxwork,DP(idx+i,2*dup)+(dup?sc:0));
            mn = min(mn, time);
        }
        return m = mn;
    }

    int minTime(vector <int> workCost, int splitCost) {
        wc = workCost;
        sc = splitCost;
        sort(rall(wc));
        mem(memo,-1);
        return DP(0,1);

    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    FoxAndDoraemon *obj;
    int answer;
    obj = new FoxAndDoraemon();
    clock_t startTime = clock();
    answer = obj->minTime(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    int p2;

    {
	// ----- test 0 -----
	int t0[] = {1,2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000;
	p2 = 1002;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 1 -----
	int t0[] = {3,6,9,12};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000;
	p2 = 2012;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 2 -----
	int t0[] = {1000,100,10,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 1001;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 3 -----
	int t0[] = {1712,1911,1703,1610,1697,1612};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 2012;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 4 -----
	int t0[] = {3000,3000,3000,3000,3000,3000,3000,3000,3000,3000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3000;
	p2 = 15000;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 5 -----
	int t0[] = {58};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3600;
	p2 = 58;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
