#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define myfind(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

class SwitchingGame {
public:
     int timeToWin(vector <string> states) {
          string prev = string(sz(states[0]),'-');

          int res=0;
          rep(i,sz(states)) {
               if (prev == states[i]) {
                    ++res;
                    continue;
               }
               bool ys1=0,ys2=0;
               rep(j,sz(prev)){
                    if(states[i][j]=='+' && prev[j] =='-'){
                         ys1 = 1;
                         prev[j]='+';
                    }
               }
               rep(j,sz(prev)){
                    if(states[i][j]=='-' && prev[j] =='+'){
                         ys2 = 1;
                         prev[j]='-';
                    }
               }
               rep(j,sz(states[i])){
                    if(states[i][j]=='?'){
                         repa(ii,i+1,sz(states)-1,1){
                              if(states[ii][j] != '?'){
                                   if(states[ii][j] == prev[j]) break;
                                   if(states[ii][j] == '+' && ys1)
                                        prev[j]='+';
                                   if(states[ii][j] == '-' && ys2)
                                        prev[j]='-';
                                   break;
                              }
                         }
                    }
               }
               res += ys1+ys2+1;
          }
          return res;

     }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SwitchingGame *obj;
	int answer;
	obj = new SwitchingGame();
	clock_t startTime = clock();
	answer = obj->timeToWin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
        {
             // ----- test 6 -----
             string t0[] = {"+-?","+--","+++"};
             p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
             p1 = 5;
             all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
             // ------------------
        }
        
	{
	// ----- test 0 -----
	string t0[] = {"++--","--++"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"+-++","+-++"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"++","+?","?+","++"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"+","?","?","?","-"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"+?" "?+++","++?" "?+-","?++?" "?+","?-+-?" "?","?" "?+?++","++-?+?","?++?-+","?--+++","-?" "?-?+"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"++?" "?+?" "?+?+?" "?-+?-?" "?+?" "?-?++?" "?" "?" "?" "?--+?-+","+?" "?+?+?-?+?-?+--?" "?" "?-?" "?-?" "?" "?-+?" "?-?" "?" "?-?","+?" "?" "?-+-+--?-?" "?" "?--+?" "?" "?" "?" "?+++?" "?+?" "?+?+?" "?","+?++?---?" "?" "?" "?" "?" "?" "?" "?" "?-?" "?-?-?" "?-?" "?" "?" "?" "?++?" "?" "?","?+?" "?" "?" "?+?++?" "?" "?-?" "?" "?--?" "?" "?" "?-++?" "?-++?" "?+?-","?" "?" "?-?" "?+?-+-?" "?+--?" "?+-?+-+-?----++?-?" "?","?" "?+?" "?-?-?" "?" "?" "?" "?" "?-+?" "?" "?" "?" "?" "?" "?" "?-?+?-+?+?++?","?-+?-?++?" "?" "?+-+?-?+?" "?+++?+-++?" "?" "?" "?" "?-?" "?","?+--+?+?--?+?++?+-+?+-?" "?+--++++-?" "?" "?" "?","?++-++?" "?+--?" "?+-?" "?++?" "?-+?-?" "?" "?-?-++?-+","--?" "?" "?+?" "?+?" "?+++++?" "?+?" "?-+?" "?" "?+?--+-?++?","?" "?+++?" "?" "?" "?" "?-?" "?" "?" "?+?" "?" "?-?-?" "?" "?" "?" "?+?--?" "?-?-","+-?" "?" "?" "?-+-++?+?" "?+?" "?-+?++?+++?+?+?-+?" "?","+?+-+?+?-?+?" "?+?" "?" "?+?++-?" "?-?" "?" "?" "?+?+-?" "?+"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 35;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
