#include <bits/stdc++.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define indexof(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

typedef complex<long double> point;
#define sz(a) ((int)(a).size())
#define all(n) (n).begin(),(n).end()
#define EPS 1e-9
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define polar(r,t) ((r)*exp(point(0,(t))))
#define angle(v) (atan2((v).Y,(v).X))
#define length(v) ((long double)hypot((v).Y,(v).X))
#define lengthSqr(v) (dot(v,v))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define rotate(v,t) (polar(v,t))
#define rotateabout(v,t,a)  (rotate(vec(a,v),t)+(a))
#define reflect(p,m) ((conj((p)/(m)))*(m))
#define normalize(p) ((p)/length(p))
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define mid(a,b) (((a)+(b))/point(2,0))
#define perp(a) (point(-(a).Y,(a).X))
#define colliner pointOnLine

inline long double torad(long double degree)
{
     return degree*M_PI/180.0L;
}
int pointLineState(point a, point b, point p)
{
     //return 1: point on soome side, -1 on the other side, 0 on the line
     // -1 -> on right
     // 1 -> on left
     point line = vec(a,b);
     point pnt = vec(a,p);
     long double res = cross(line,pnt);
     if (fabs(res) < EPS) return 0;
     return res > 0?1:-1;
}
vector<point> png,pnts;

bool isvalid[250][250];
bool allInside(point a, point b)
{
     rep(i,sz(png)) {
          if (pointLineState(a,b,png[i]) <= 0) return 0; //right;
     }
     return 1; //all left
}
long double triArea(point a, point b, point c)
{
     long double res = cross(vec(a,b),vec(b,c));
     return fabs(res)/2.0;
}

long double memo[250][250];
long double DP(int st, int en)
{
     if (st >= en) return 0;
     long double& m = memo[st][en];
     if (m == m) return m;
     m = 1.0/0.0;
     repa(i,st+1,en,1) {
          if(isvalid[st][i])
               m = min(m, triArea(pnts[st],pnts[i],pnts[en])+DP(i,en));
     }
     
     return m;
}
class FencingPenguinsEasy {
public:
     double calculateMinArea(int numPosts, int radius, vector <int> x, vector <int> y) {
          mem(memo,-1); mem(isvalid,0);
          png.clear(); png.resize(sz(x));
          pnts.clear(); pnts.resize(numPosts);
          rep(i,sz(png)) {
               png[i] = point(x[i], y[i]);
          }
          point p(radius,0);
          long double ang = torad(360.0L/numPosts);
          rep(i,sz(pnts)) {
               pnts[i] = p;
               p = rotate(p,ang);
          }
          rep(i,sz(pnts))
               rep(j,sz(pnts))
                  if(i != j)
                    isvalid[i][j] = allInside(pnts[i],pnts[j]);
                    
          long double minarea = 1.0L/0.0;
          rep(i,sz(pnts)) {
               repa(j,i+1,sz(pnts)-1,1){
                    if(isvalid[j][i])
                         minarea = min(minarea, DP(i,j));
               }
          }
          return minarea == 1.0/0.0?-1:minarea;
     }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, double p4)
{
     cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
     for (int i = 0; int(p2.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p2[i];
     }
     cout << "}" << "," << "{";
     for (int i = 0; int(p3.size()) > i; ++i) {
          if (i > 0) {
               cout << ",";
          }
          cout << p3[i];
     }
     cout << "}";
     cout << "]" << endl;
     FencingPenguinsEasy *obj;
     double answer;
     obj = new FencingPenguinsEasy();
     clock_t startTime = clock();
     answer = obj->calculateMinArea(p0, p1, p2, p3);
     clock_t endTime = clock();
     delete obj;
     bool res;
     res = true;
     cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
     if (hasAnswer) {
          cout << "Desired answer:" << endl;
          cout << "\t" << p4 << endl;
     }
     cout << "Your answer:" << endl;
     cout << "\t" << answer << endl;
     if (hasAnswer) {
          res = answer == answer && fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
     }
     if (!res) {
          cout << "DOESN'T MATCH!!!!" << endl;
     } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
          cout << "FAIL the timeout" << endl;
          res = false;
     } else if (hasAnswer) {
          cout << "Match :-)" << endl;
     } else {
          cout << "OK, but is it right?" << endl;
     }
     cout << "" << endl;
     return res;
}
int main()
{
     bool all_right;
     all_right = true;
     
     int p0;
     int p1;
     vector <int> p2;
     vector <int> p3;
     double p4;
     
     {
          // ----- test 0 -----
          p0 = 3;
          p1 = 5;
          int t2[] = {-1};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {0};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = 32.47595264191645;
          all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 1 -----
          p0 = 30;
          p1 = 5;
          int t2[] = {6};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {0};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = -1.0;
          all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 2 -----
          p0 = 4;
          p1 = 5;
          int t2[] = {2};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {1};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = 25.0;
          all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 3 -----
          p0 = 4;
          p1 = 5;
          int t2[] = {2,-2};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {1,-1};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = 50.0;
          all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 4 -----
          p0 = 8;
          p1 = 5;
          int t2[] = {8};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {8};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = -1.0;
          all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 5 -----
          p0 = 7;
          p1 = 10;
          int t2[] = {9};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {1};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = 29.436752637711805;
          all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 6 -----
          p0 = 30;
          p1 = 800;
          int t2[] = {8,2,100,120,52,67,19,-36};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {-19,12,88,-22,53,66,-140,99};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = 384778.74757953023;
          all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     {
          // ----- test 7 -----
          p0 = 221;
          p1 = 100000;
          int t2[] = {90000,-90000,0,0};
          p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
          int t3[] = {0,0,90000,-90000};
          p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
          p4 = 1.9732351952117462E10;
          all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, true, p4) && all_right;
          // ------------------
     }
     
     if (all_right) {
          cout << "You're a stud (at least on the example cases)!" << endl;
     } else {
          cout << "Some of the test cases had errors." << endl;
     }
     return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
