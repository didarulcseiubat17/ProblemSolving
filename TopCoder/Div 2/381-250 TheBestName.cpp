#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
using namespace std;

int calc(string& s) {
	int res = 0;
	fo(i,s.size())
		res += s[i] - 'A' + 1;
	return res;
}

bool cmp(string a, string b) {
	if (a == "JOHN")
		return 1;
	else if (b == "JOHN")
		return 0;

	int ca = calc(a), cb = calc(b);
	if (ca > cb)
		return 1;
	else if (cb > ca)
		return 0;

	return (a < b);
}

class TheBestName {
public:

	vector<string> sort(vector<string> names) {

		std::sort(names.begin(), names.end(), cmp);
		return names;

	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<string> p0, bool hasAnswer, vector<
		string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TheBestName *obj;
	vector<string> answer;
	obj = new TheBestName();
	clock_t startTime = clock();
	answer = obj->sort(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<string> p0;
	vector<string> p1;

		{
			// ----- test 0 -----
			string t0[] = { "JOHN", "PETR", "ACRUSH" };
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
			string t1[] = { "JOHN", "ACRUSH", "PETR" };
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
			all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
			// ------------------
		}

		{
			// ----- test 1 -----
			string t0[] = { "GLUK", "MARGARITKA" };
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
			string t1[] = { "MARGARITKA", "GLUK" };
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
			all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
			// ------------------
		}

		{
			// ----- test 2 -----
			string t0[] = { "JOHN", "A", "AA", "AAA", "JOHN", "B", "BB", "BBB",
					"JOHN", "C", "CC", "CCC", "JOHN" };
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
			string t1[] = { "JOHN", "JOHN", "JOHN", "JOHN", "CCC", "BBB", "CC",
					"BB", "AAA", "C", "AA", "B", "A" };
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
			all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
			// ------------------
		}

		{
			// ----- test 3 -----
			string t0[] = { "BATMAN", "SUPERMAN", "SPIDERMAN", "TERMINATOR" };
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
			string t1[] = { "TERMINATOR", "SUPERMAN", "SPIDERMAN", "BATMAN" };
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
			all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
			// ------------------
		}

	{
		// ----- test 3 -----
		string t0[] = { "AAAA", "AAAA" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "AAAA", "AAAA" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "BABAABA", "ABAAAAA", "BABAAAAABA", "ABBABAA",
				"AAABABA", "BBBBAAA", "BAAAAAAAAA", "AAAABAAA", "BAAAABAAAA",
				"AABAAAB", "BAAAABAAA", "BAABABB", "BABABBA", "AAABABAAAB",
				"AAAAAAA", "AAAABBA", "BABAAAA", "AABAABA", "AABAAABBA",
				"AAAAAAAAA", "AAAAAAB", "BAABAAAAA", "AAABAAB", "AAABAAA",
				"AAAAAAABA", "AAAAAAA", "BABAAAAAA", "AAABABA", "ABABBAA",
				"ABABABA", "ABBBAAAAA", "AAAABAA", "AABAABA", "AAABBAA",
				"AABBBAAB", "AABAAAA", "AAAABAAAA", "BAAABAAAA", "BBAABAAAA",
				"AAABAAA", "BAAAAAA", "AAAAAAABA", "BABAAAA", "AAABAAAA",
				"AABAAAAABA", "AAABBAB", "ABABABAA", "AAAAAABABA", "BAAABAAA",
				"AAAAAAA" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "AAABABAAAB", "BABAAAAABA", "AAAAAABABA", "AABAAAAABA",
				"AABAAABBA", "AABBBAAB", "ABBBAAAAA", "BAAAABAAAA",
				"BBAABAAAA", "ABABABAA", "BAAAAAAAAA", "BAAAABAAA",
				"BAAABAAAA", "BAABAAAAA", "BAABABB", "BABAAAAAA", "BABABBA",
				"BBBBAAA", "AAAAAAABA", "AAAAAAABA", "AAAABAAAA", "AAABBAB",
				"ABABABA", "ABABBAA", "ABBABAA", "BAAABAAA", "BABAABA",
				"AAAAAAAAA", "AAAABAAA", "AAAABBA", "AAABAAAA", "AAABAAB",
				"AAABABA", "AAABABA", "AAABBAA", "AABAAAB", "AABAABA",
				"AABAABA", "BABAAAA", "BABAAAA", "AAAAAAB", "AAAABAA",
				"AAABAAA", "AAABAAA", "AABAAAA", "ABAAAAA", "BAAAAAA",
				"AAAAAAA", "AAAAAAA", "AAAAAAA" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
