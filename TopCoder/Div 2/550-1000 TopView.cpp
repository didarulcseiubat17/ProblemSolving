#include <bits/stdc++.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define indexof(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

map<char,int> mapp;
char toch[300];
inline void calcid(){
    int id=0;
    repi(it,mapp){
        mapp[it->first] = id;
        toch[id] = it->first;
        id++;
    }
}
struct state{
    int mnr,mxr,mnc,mxc;
};
vector<state> st;

const int MAXN = 301;
int in[MAXN];
vector<set<int> > adj;
vector<int> res;
bool vis[300];
bool topo(int n) {
    res.clear();
    mem(vis,0);
    priority_queue<int, vector<int>, greater<int> > Q; //lvl,id
    for (int i = 0; i < n; i++)
        if (!in[i])
            Q.push(i);
    while (Q.size()) {
        int cur = Q.top();
        Q.pop();
        vis[cur]=1;
        res.push_back(cur);
        for (int nxt : adj[cur]) {
            if (!--in[nxt]){
                if(vis[nxt]) return 0;
                Q.push(nxt);
            }
        }
    }
    for (int i = 0; i < n; i++)
        if (!vis[i]) return 0;
    return 1;
}
void init(){
    mem(toch,0);
    mem(in,0);
    mapp.clear();
    st.clear(); st.resize(300, {1<<27,-1<<27,1<<27,-1<<27});
    adj.clear(); adj.resize(300);
}

class TopView {
public:
    string findOrder(vector <string> grid) {
        init();
        rep(i,sz(grid)) rep(j,sz(grid[0])){
            if(grid[i][j] != '.')
                mapp[grid[i][j]];
        }
        calcid();
        rep(i,sz(grid)) rep(j,sz(grid[0])){
            if(grid[i][j]=='.') continue;
            int id = mapp[grid[i][j]];
            st[id].mnr = min(st[id].mnr, i);
            st[id].mnc = min(st[id].mnc, j);
            st[id].mxr = max(st[id].mxr, i);
            st[id].mxc = max(st[id].mxc, j);
        }

        repi(it, mapp){
            state& cur = st[it->second];
            repa(i,cur.mnr,cur.mxr,1){
                repa(j,cur.mnc,cur.mxc,1){
                    if(grid[i][j] == '.'){
                        return "ERROR!";
                    }
                    int nxt = mapp[grid[i][j]];
                    if(nxt == it->second) continue;
                    if(adj[it->second].insert(nxt).second)
                        in[nxt]++;
                }
            }
        }
        if(!topo(sz(mapp))) return "ERROR!";
        string ret;
        rep(i,sz(res)) ret += toch[res[i]];
        return ret;

    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TopView *obj;
	string answer;
	obj = new TopView();
	clock_t startTime = clock();
	answer = obj->findOrder(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
    {
    // ----- test 4 -----
    string t0[] = {"cabac","cbaac"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "ERROR!";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
    }

	{
	// ----- test 0 -----
	string t0[] = {"..AA..",".CAAC.",".CAAC."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "CA";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..47..","..74.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ERROR!";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"bbb666",".655X5","a65AA5","a65AA5","a65555"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "65AXab";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"aabbaaaaaaaaaaaaaaaaaa","aabbccccccccccccccaaaa","aab11111ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ddddddddddaaaa","aab13331DDDDDDDDDDaaaa","aab13331DDDDDDDDDDaaaa","aa.11111DDDDDDDDDDaaaa","aaaaaaaaaaaaaaaaaaaaaa"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ERROR!";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	

	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
