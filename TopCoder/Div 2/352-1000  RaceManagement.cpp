#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
typedef long long ll;
using namespace std;

class RaceManagement {
public:
	double getPayoutFactor(vector<int> probability, vector<int> amounts,
			int minimumMoney) {
		vector<double> prob(probability.size());
		fo(i,prob.size()) {
			prob[i] = (double) probability[i] / 100;
			fo(j,prob.size()) {
				if (i == j)
					continue;

				prob[i] *= (100.0 - probability[j]) / 100.0;
			}
		}

		double lose = 0, win = 0;
		fo(i,prob.size()) { //win of horse i
			lose += prob[i] * amounts[i];
			win += amounts[i];
		}

		if (lose < 1e-9)
			return (minimumMoney>win)?-1:-2;

		double P = (win - minimumMoney) / lose -1;
		if (P < 1e-9)
			return -1;
		return P;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, vector<int> p1, int p2,
		bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	RaceManagement *obj;
	double answer;
	obj = new RaceManagement();
	clock_t startTime = clock();
	answer = obj->getPayoutFactor(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<int> p0;
	vector<int> p1;
	int p2;
	double p3;

	{
		// ----- test 0 -----
		int t0[] = { 30 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 100 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 10;
		p3 = 2.0;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 50, 40 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 300, 200 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 100;
		p3 = 2.076923076923077;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 50 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 100 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 1000;
		p3 = -1.0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 100 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 100;
		p3 = -2.0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
			// ----- test 3 -----
			int t0[] = {100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
			int t1[] ={0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
			p2 = 100;
			p3 = -1;
			all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
			// ------------------
		}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
