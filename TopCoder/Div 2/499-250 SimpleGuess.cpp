#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define allarr(n) (n), (n)+( (sizeof (n)) / (sizeof (*n)) )
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
typedef long long ll;
using namespace std;

class SimpleGuess {
public:
	int getMaximum(vector<int> h) {
		int res=0;
		rep(i,sz(h)){
			reps(j,i+1, sz(h)){
				int s = h[i] + h[j];
				if(s & 1)
					continue;
				int x = s/2;
				int y = max(h[i],h[j])-x;
				res = max(res, x*y);
			}
		}


	return res;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<int> p0, bool hasAnswer, int p1) {
cout << "Test " << testNum << ": [" << "{";
for (int i = 0; int(p0.size()) > i; ++i) {
	if (i > 0) {
		cout << ",";
	}
	cout << p0[i];
}
cout << "}";
cout << "]" << endl;
SimpleGuess *obj;
int answer;
obj = new SimpleGuess();
clock_t startTime = clock();
answer = obj->getMaximum(p0);
clock_t endTime = clock();
delete obj;
bool res;
res = true;
cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds"
		<< endl;
if (hasAnswer) {
	cout << "Desired answer:" << endl;
	cout << "\t" << p1 << endl;
}
cout << "Your answer:" << endl;
cout << "\t" << answer << endl;
if (hasAnswer) {
	res = answer == p1;
}
if (!res) {
	cout << "DOESN'T MATCH!!!!" << endl;
} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
	cout << "FAIL the timeout" << endl;
	res = false;
} else if (hasAnswer) {
	cout << "Match :-)" << endl;
} else {
	cout << "OK, but is it right?" << endl;
}
cout << "" << endl;
return res;
}
int main() {
bool all_right;
all_right = true;

vector<int> p0;
int p1;

{
	// ----- test 0 -----
	int t0[] = { 1, 4, 5 };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 1 -----
	int t0[] = { 1, 4, 5, 8 };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 2 -----
	int t0[] = { 9, 8, 7, 6, 5, 4, 3, 2, 1 };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 3 -----
	int t0[] = { 2, 100 };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2499;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
}

{
	// ----- test 4 -----
	int t0[] = { 50, 58, 47, 57, 40 };
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 441;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
}

if (all_right) {
	cout << "You're a stud (at least on the example cases)!" << endl;
} else {
	cout << "Some of the test cases had errors." << endl;
}
return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
