#include <bits/stdc++.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define indexof(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

const int mod = 1000000007;
vector<unordered_map<int,int> > memo;
int val;
vi nums;
int DP(int idx, int mul){
    if(idx == sz(nums)) return mul==1;
    if(memo[idx].count(mul)) return memo[idx][mul];
    int m = DP(idx+1,mul);
    if(mul % nums[idx] == 0)
        m += DP(idx+1, mul/nums[idx]);
    return memo[idx][mul] = m%mod;
}
class GoodSubset {
public:
	int numberOfSubsets(int goodValue, vector <int> d) {
        memo.clear();
        memo.resize(102);
        val = goodValue;
        nums = d;
        int r=0;
        rep(i,sz(nums)){
            if(val%nums[i] == 0)
            r += DP(i+1,val/nums[i]);
            r %= mod;
        }
        return r;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	GoodSubset *obj;
	int answer;
	obj = new GoodSubset();
	clock_t startTime = clock();
	answer = obj->numberOfSubsets(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
    {
    // ----- test 0 -----
    p0 = 1286485200;
    int t1[] = {2, 2, 2, 2, 3, 3, 3, 5, 5, 7, 7, 11, 13, 17, 51, 275, 49, 13013, 28, 18, 27489, 204, 6, 45, 33, 187, 10, 30, 33, 26, 26, 1, 455, 189, 350, 70, 306, 70, 7, 7350, 2380, 210, 105, 45, 52, 88, 2, 20, 462, 5460, 26, 15, 90, 750, 1470, 429, 14, 3234, 1870, 132, 170, 12, 45, 33, 5, 39, 1650, 6, 6, 22, 3, 52, 55, 378, 42, 6, 21, 7, 1694, 35, 12, 756, 150, 1029, 4, 378, 13, 126, 238, 126, 1287, 1430, 30, 130, 68, 6, 663, 52, 26};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 23063164;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
    }

	{
	// ----- test 0 -----
	p0 = 10;
	int t1[] = {2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 6;
	int t1[] = {2,3,4,5,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	int t1[] = {1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 12;
	int t1[] = {1,2,3,4,5,6,7,8,9,10,11,12};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
