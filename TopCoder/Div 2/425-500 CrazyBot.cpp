#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
using namespace std;

int di[4] = { 0, 1, 0, -1 };
int dj[4] = { 1, 0, -1, 0 };
double pro[4];
bool vis[100][100];

double DFS(int i, int j, int n, double res) {
	if (n == 0)
		return res;

	double r = 0;
	fo(d,4) {
		int nr = i + di[d];
		int nc = j + dj[d];

		if (vis[nr][nc])
			continue;

		vis[nr][nc] = 1;
		r += DFS(nr, nc, n - 1, res * pro[d]);
		vis[nr][nc] = 0;
	}
	return r;
}
class CrazyBot {
public:
	double getProbability(int n, int east, int west, int south, int north) {
		vis[50][50]=1;
		pro[0] = east/100.0, pro[1] = south/100.0, pro[2] = west/100.0, pro[3] = north/100.0;
		return DFS(50,50,n,1);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4,
		bool hasAnswer, double p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << ","
			<< p3 << "," << p4;
	cout << "]" << endl;
	CrazyBot *obj;
	double answer;
	obj = new CrazyBot();
	clock_t startTime = clock();
	answer = obj->getProbability(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p5 - answer) <= 1e-9 * max(1.0, fabs(p5));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	double p5;

	{
		// ----- test 0 -----
		p0 = 1;
		p1 = 25;
		p2 = 25;
		p3 = 25;
		p4 = 25;
		p5 = 1.0;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 2;
		p1 = 25;
		p2 = 25;
		p3 = 25;
		p4 = 25;
		p5 = 0.75;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 7;
		p1 = 50;
		p2 = 0;
		p3 = 0;
		p4 = 50;
		p5 = 1.0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 14;
		p1 = 50;
		p2 = 50;
		p3 = 0;
		p4 = 0;
		p5 = 1.220703125E-4;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 14;
		p1 = 25;
		p2 = 25;
		p3 = 25;
		p4 = 25;
		p5 = 0.008845493197441101;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5)
				&& all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
