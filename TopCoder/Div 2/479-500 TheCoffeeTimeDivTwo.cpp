#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
using namespace std;

bool fnd(vector<int>& t, int v) {
	fo(i,t.size())
		if (t[i] == v)
			return 1;
	return 0;
}
class TheCoffeeTimeDivTwo {
public:
	int find(int n, vector<int> tea) {
		sort(rbe(tea));
		vector<int> cof;
		bool s=0;
		for (int i = n; i > 0; i--)
			if (!fnd(tea, i))
				cof.push_back(i);

		int res = 47, np = 0;
		fo(i,tea.size()) {
			res += 4 + ((s == 0) ? tea[i] : tea[i - 1] - tea[i]);
			s=1;
			if (++np % 7 == 0) {
				if (i + 1 < tea.size())
					res += tea[i] + 47,s=0;
			}
		}

		res += tea.back() + ((cof.size() > 0) ? 47 : 0);
		np = 0,s=0;
		fo(i,cof.size()) {
			res += 4 + ((s == 0) ? cof[i] : cof[i - 1] - cof[i]);
			s=1;
			if (++np % 7 == 0) {
				if (i + 1 < cof.size())
					res += cof[i] + 47,s=0;
			}
		}

		res += (cof.size() > 0) ? cof.back() : 0;
		return res;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector<int> p1, bool hasAnswer,
		int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheCoffeeTimeDivTwo *obj;
	int answer;
	obj = new TheCoffeeTimeDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector<int> p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = 2;
		int t1[] = { 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 108;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 2;
		int t1[] = { 2, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 59;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 15;
		int t1[] = { 1, 2, 3, 4, 5, 6, 7 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 261;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 47;
		int t1[] = { 1, 10, 6, 2, 4 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 891;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
