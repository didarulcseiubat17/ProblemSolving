#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define indexof(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

double calc(double den, vi& vol, vi& w){
    double res=0;
    rep(i,sz(vol)){
        double ww = den*vol[i];
        res += fabs(ww-1.*w[i]);
    }
    return res;
}
class CandyMaking {
public:
    double findSuitableDensity(vector <int> containerVolume, vector <int> desiredWeight) {
        double st=0,siz=3e7;
        while(siz > 1e-15){
            double a= st + siz/3;
            double b = st + 2.*siz/3.;
            if(calc(a,containerVolume, desiredWeight) >= calc(b,containerVolume, desiredWeight))
                st = a;
            siz = 2.*siz/3.;
        }
        return calc(st,containerVolume, desiredWeight);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, double p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    CandyMaking *obj;
    double answer;
    obj = new CandyMaking();
    clock_t startTime = clock();
    answer = obj->findSuitableDensity(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    double p2;

    {
    // ----- test 4 -----
    int t0[] = {978, 140, 820, 414, 400, 435, 872, 245, 984, 708, 882, 49, 264, 740, 614, 718, 454, 72, 833, 906, 653, 213, 1, 682, 643, 513, 770, 315, 117, 23, 786, 57, 471, 838, 877, 817, 560, 114, 232, 922, 787};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] =  {584844, 83720, 490360, 247572, 239200, 260130, 521456, 146510, 588432, 423384, 527436, 29302, 157872, 442520, 367172, 429364, 271492, 43056, 498134, 541788, 390494, 127374, 598, 407836, 384514, 306774, 460460, 188370, 69966, 13754, 470028, 34086, 281658, 501124, 524446, 488566, 334880, 68172, 138736, 551356, 470626};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0.0;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    int t0[] = {999112, 999545, 999668, 999494, 999800, 999112, 999431, 999330, 999387, 999264, 999729, 999452, 999458, 999258, 999107, 999835, 999773, 999221, 999780, 999936, 999867, 999209, 999261, 999850, 999156, 999711, 999357, 999090, 999377, 999775, 999308, 999415, 999017, 999319, 999939, 999818, 999213, 999402, 999609, 999330, 999884};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] =  {5, 3, 2, 8, 10, 2, 6, 9, 2, 1, 7, 9, 1, 3, 2, 7, 8, 5, 7, 7, 4, 9, 7, 2, 9, 10, 6, 5, 7, 8, 2, 4, 5, 6, 10, 2, 5, 10, 9, 1, 8};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 102.9741833999;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    int t0[] = {999969, 999961, 999186, 999030, 999403, 999914, 999240, 999310, 999115, 999886, 999239, 999278, 999800, 999966, 999040, 999980, 999946, 999130, 999042, 999946, 999162, 999753, 999765, 999896, 999375, 999859, 999234, 999917, 999625, 999009, 999448, 999489, 999129, 999938, 999608, 999077, 999255, 999478, 999329, 999321, 999034, 999718};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] =  {4, 1, 2, 2, 4, 4, 3, 6, 5, 1, 6, 1, 8, 5, 10, 1, 8, 5, 6, 5, 8, 4, 4, 3, 9, 3, 3, 7, 4, 10, 4, 2, 6, 10, 8, 1, 2, 5, 6, 4, 6, 1};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 89.0125354837;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 0 -----
    int t0[] = {5};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {1000};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0.0;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 1 -----
    int t0[] = {10,10};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {1000,2000};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1000.0;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 2 -----
    int t0[] = {10,20,40};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {4000,2000,1000};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 5250.0;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 3 -----
    int t0[] = {1234,1541,3321,1234,123,123,3414,123,12,2442,1421,1223,3232,1123,2121};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {3213,1231,232143,44312,132132,142424,123123,41341,41244,21312,232131,2312,2322,11,2223};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 983673.2727272725;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    int t0[] = {30621,30620,2};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {1,1,1000000};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 999999.9999673415;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }



    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
