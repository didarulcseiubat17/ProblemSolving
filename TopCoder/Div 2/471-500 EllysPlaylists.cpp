#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;

const int MOD = 1000000007;

int memo[55][1010];

bool check(string s1, string s2) {
	int sz1 = s1.size();

	if (s1[sz1 - 3] == s2[0] && s1[sz1 - 2] == s2[1] && s1[sz1 - 1] == s2[2])
		return 1;
	return 0;
}

class EllysPlaylists {
public:

	int n;
	int DP(int last, int k, vector<string>& songs) {
		if (k == 0)
			return 1;

		if (last > -1) {
			if (memo[last][k]!= -1)
				return memo[last][k];
		}

		int ret = 0;
		for (int i = 0; i < n; i++) {
			if (last == -1 || check(songs[i], songs[last])) {
				ret += DP(i, k - 1, songs) % MOD;
				ret %= MOD;
			}
		}
		if (last > -1)
			return memo[last][k] = ret;
		return ret;
	}
	int countPlaylists(vector<string> songs, int K) {
		memset(memo, -1, sizeof memo);
		n = songs.size();

		return DP(-1, K, songs);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	EllysPlaylists *obj;
	int answer;
	obj = new EllysPlaylists();
	clock_t startTime = clock();
	answer = obj->countPlaylists(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"abcxxx","xxxabc","entersandman","toxicity","maneater","heavensalie","liebe","citylights","fadetoblack","breakingthehabit","yyydefg","defgyyy"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"aaaaaa","aaabcd","bcdaaa"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 13;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"aaa","aaaa","aaaaa"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 27;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"elly","looks","lovely"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"life","universe","everything"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 42;
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"aaaaaaaaa","aaabbbaaa","aaacccaaa","aaadddaaa","aaaeeeaaa","aaafffaaa"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	p2 = 176782322;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaaaaaaa","aaaaa","aaaaa","aaaaa","aaaaaaaaaaaaaaaaaaaa","aaaaa","aaaaa","aaaaaaaaaaaaaaa","aaaaaaaaaaaaaaa","aaaaaaaaaa","aaaaa","aaaaaaaaaaaaaaaaaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaa","aaaaaaaaaa","aaaaa","aaaaa","aaaaa","aaaaaaaaaaaaaaaaaaaa","aaaaa","aaaaa","aaaaaaaaaaaaaaa","aaaaaaaaaaaaaaa","aaaaaaaaaa","aaaaa","aaaaaaaaaaaaaaaaaaaa","aaaaa","aaa","a","a","a","a","a","aaa","a"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000;
	all_right = KawigiEdit_RunTest(6, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0.clear() /*{}*/;
	p1 = 1000;
	p2 = 1;
	all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
