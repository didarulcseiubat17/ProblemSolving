#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
typedef long long ll;
using namespace std;

class ModularInequality {
public:

	ll f(ll x, vi& A) {
		ll sum = 0;

		fo(i,A.size()) {
			sum += abs(A[i] - x);
		}
		return sum;
	}

	int countSolutions(vector<int> A, int P) {
		sort(rbe(A));
		int x = A[A.size() / 2]; //x is minimum point

		if (f(x, A) > P)
			return 0;

		ll lwr = -3e9, upr = x, lst1 = 3e9, lst2 = -3e9;
		while (lwr <= upr) {
			ll mid = (lwr + upr) / 2;
			ll res = f(mid, A);

			if (res <= P)
				upr = mid - 1, lst1 = min(mid, lst1);

			else
				lwr = mid + 1;
		}

		lwr = x, upr = 3e9;
		while (lwr <= upr) {
			ll mid = (lwr + upr) / 2;
			ll res = f(mid, A);

			if (res <= P)
				lwr = mid + 1, lst2 = max(mid, lst2);
			else
				upr = mid - 1;
		}

		return lst2 - lst1 + 1;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, int p1, bool hasAnswer,
		int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	ModularInequality *obj;
	int answer;
	obj = new ModularInequality();
	clock_t startTime = clock();
	answer = obj->countSolutions(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<int> p0;
	int p1;
	int p2;

	{
		// ----- test 0 -----
		int t0[] = { 1, 2, 3 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6;
		p2 = 5;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 10, 30, 15, -1, 17 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 42;
		p2 = 7;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 0, 2, 3, -5, 10 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 17;
		p2 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { -693 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1265;
		p2 = 2531;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { 965, -938, -396, -142, 926, 31, -720 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6495;
		p2 = 1781;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1000000000;
		p2 = 2000000001;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { -1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000, -1000000000, -1000000000,
				-1000000000, -1000000000 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 50;
		p2 = 3;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { -1000000000 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1000000000;
		p2 = 2000000001;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = {8634540, -22892621, 30999618, -24950074, -14697884, -31284864, -363336, -2411172, -8201778, 23155266, 1055459, -5469747, 5194162, 26059147, 26388853, -21358370, -15036640, 19320815, 24853808, 31005727, 14803175, -38746901, -2790219, 15202558, 8705691, -7278800, -39069400, 20063316, 22701235, -37501580, -10531470, -10070264, 30015397, -8676569, 12992785, 26115274, 30187516, 34712221, -26042162, -1208283, -12159006, 6496895, -38159209, 13987932, 29185647, -10207800};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 850945186;
		p2 = 1418796;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
