#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
typedef long long ll;
using namespace std;

bool cmp(pair<int,string> p1,pair<int,string> p2){
	if(p1.first > p2.first)
		return 1;
	if(p1.first < p2.first)
		return 0;

	return (p1.second < p2.second);
}

class Paintball {
public:

	vector<string> getLeaderboard(vector<string> players,
			vector<string> messages) {
		map<string, vs> team;
		map<string, string> name;
		map<string, int> scoreName;
		map<string, int> scoreTeam;
		set<string> steams;
		fo(i,players.size()) {
			stringstream ss(players[i]);
			string n, t;
			ss >> n >> t;
			team[t].push_back(n);
			name[n] = t;
			steams.insert(t);
		}

		string f, t;
		fo(i,messages.size()) {
			stringstream ss(messages[i]);
			ss >> f >> t >> t;
			if (name[f] == name[t])
				scoreName[f]--,scoreTeam[name[f]]--;

			else {
				scoreTeam[name[f]]++, scoreName[f]++;
				scoreTeam[name[t]]--, scoreName[t]--;
			}
		}

		vector<pair<int, string> > srt;
		for (set<string>::iterator it = steams.begin(); it != steams.end(); it++) {
			srt.push_back(mp(scoreTeam[*it] , *it));
		}

		sort(srt.begin(), srt.end(), cmp);
		vs res;
		fo(i,srt.size()) {
			stringstream ss;
			ss<<srt[i].second<<" ";
			ss<<srt[i].first;
			res.push_back(ss.str());
			vector<pair<int,string> > srtname;
			fo(j,team[srt[i].second].size()){
				srtname.push_back(mp(scoreName[team[srt[i].second][j]], team[srt[i].second][j]));
			}

			sort(srtname.begin(), srtname.end(), cmp);
			fo(j,srtname.size()){
				stringstream sss;

				sss<<"  "<<srtname[j].second<<" ";
				sss<<srtname[j].first;
				res.push_back(sss.str());
			}
		}
		return res;


	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<string> p0, vector<string> p1,
		bool hasAnswer, vector<string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Paintball *obj;
	vector<string> answer;
	obj = new Paintball();
	clock_t startTime = clock();
	answer = obj->getLeaderboard(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<string> p0;
	vector<string> p1;
	vector<string> p2;

	{
		// ----- test 0 -----
		string t0[] = { "A RED", "B BLUE" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "A SPLATTERED B" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "RED 1", "  A 1", "BLUE -1", "  B -1" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "LISA RED", "BART RED", "HOMER BLUE", "MARGE BLUE",
				"MAGGIE GREEN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "MAGGIE SPLATTERED HOMER", "MAGGIE SPLATTERED MARGE" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "GREEN 2", "  MAGGIE 2", "RED 0", "  BART 0",
				"  LISA 0", "BLUE -2", "  HOMER -1", "  MARGE -1" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "TODD STRIKEFORCE", "BART OMEGA", "DATA STRIKEFORCE",
				"MILHOUSE OMEGA", "NELSON DISCOVERYCHANNEL",
				"MARTIN DISCOVERYCHANNEL" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "BART SPLATTERED MARTIN", "TODD SPLATTERED MARTIN" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "OMEGA 1", "  BART 1", "  MILHOUSE 0", "STRIKEFORCE 1",
				"  TODD 1", "  DATA 0", "DISCOVERYCHANNEL -2", "  NELSON 0",
				"  MARTIN -2" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "DR COHO", "ST COHO", "PE COHO" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "DR SPLATTERED ST", "ST SPLATTERED PE" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "COHO -2", "  PE 0", "  DR -1", "  ST -1" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "A B", "AA AA", "AAA AAA" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "A SPLATTERED AAA", "A SPLATTERED AAA",
				"A SPLATTERED AAA", "AA SPLATTERED AAA", "AA SPLATTERED AAA" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string
				t2[] = { "B 3", "  A 3", "AA 2", "  AA 2", "AAA -5", "  AAA -5" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
