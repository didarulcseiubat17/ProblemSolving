#include <bits/stdc++.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define indexof(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

const int mod = 1000000009;
int n;
int memo[52][52][52];
string h;
vector<int> F;
void computePrefix(const string &pattern) {
    F.resize(pattern.size());
    F[0] = 0;
    int l = 0;
    for (int i = 1; pattern[i]; i++) {
        while (l && pattern[i] != pattern[l])
            l = F[l - 1];
        if (pattern[i] == pattern[l])
            l++;
        F[i] = l;
    }
}
int DP(int idx, int cur, int idxmatch){
    if(idx == n) return cur == 0 && idxmatch == sz(h);
    int& m = memo[idx][cur][idxmatch];
    if(m != -1) return m;
    m = 0;
    if(idxmatch == sz(h)){
        m = (0LL + m + DP(idx+1,cur+1,idxmatch))%mod;
        if(cur-1>=0)
            m = (0LL + m + DP(idx+1,cur-1,idxmatch))%mod;
        return m;
    }
    if(h[idxmatch]=='U'){
        //U
        m = (0LL + m + DP(idx+1,cur+1,idxmatch+1))%mod;
        //D
        int l = idxmatch;
        while (l && h[l] != 'D')
            l = F[l - 1];
        if (h[l] == 'D')
            l++;
        if(cur-1>=0)
            m = (0LL + m + DP(idx+1,cur-1,l))%mod;
    }
    else if(h[idxmatch]=='D'){
        //D
        if(cur-1>=0)
            m = (0LL + m + DP(idx+1,cur-1,idxmatch+1))%mod;
        //U
        int l = idxmatch;
        while (l && h[l] != 'U')
            l = F[l - 1];
        if (h[l] == 'U')
            l++;
        m = (0LL + m + DP(idx+1,cur+1,l))%mod;
    }
    return m;

}
class FoxAndMountain {
public:
    int count(int n, string history) {
        ::n = n;
        h = history;
        mem(memo,-1);
        computePrefix(h);
        return DP(0,0,0);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, string p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"";
    cout << "]" << endl;
    FoxAndMountain *obj;
    int answer;
    obj = new FoxAndMountain();
    clock_t startTime = clock();
    answer = obj->count(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    string p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = 4;
        p1 = "UUDD";
        p2 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 4;
        p1 = "DUUD";
        p2 = 0;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4;
        p1 = "UU";
        p2 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 49;
        p1 = "U";
        p2 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 20;
        p1 = "UUUDUUU";
        p2 = 990;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 30;
        p1 = "DUDUDUDUDUDUDUDU";
        p2 = 3718;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        p0 = 50;
        p1 = "U";
        p2 = 946357703;
        all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
