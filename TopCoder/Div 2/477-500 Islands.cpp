#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
using namespace std;

int ei[6] = { 0, 1, 0, -1, -1, 1 };
int ej[6] = { 1, 0, -1, 0, -1, -1 };
int oi[6] = { 0, 1, 0, -1, -1, 1 };
int oj[6] = { 1, 0, -1, 0, 1, 1 };

class Islands {
public:
	int beachLength(vector<string> kingdom) {
		int res = 0;
		fo(i,kingdom.size()) {
			fo(j,kingdom[i].size()) {
				if (kingdom[i][j] == '.')
					continue;

				fo(d,6) {
					int newr = i + ((i % 2) ? oi[d] : ei[d]);
					int newc = j + ((i % 2) ? oj[d] : ej[d]);

					if (newr < 0 || newc < 0 || newr >= kingdom.size() || newc
							>= kingdom[newr].size())
						continue;

					if (kingdom[newr][newc] == '.')
						res++;
				}
			}
		}
		return res;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Islands *obj;
	int answer;
	obj = new Islands();
	clock_t startTime = clock();
	answer = obj->beachLength(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<string> p0;
	int p1;

	{
		// ----- test 0 -----
		string t0[] = { ".#...#.." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "..#.##", ".##.#.", "#.#..." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 19;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "#...#.....", "##..#...#." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 15;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "....#.", ".#....", "..#..#", "####.." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 24;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
