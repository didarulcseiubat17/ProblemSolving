#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
using namespace std;

class InternetSecurity {
public:
	vector<string> determineWebsite(vector<string> address,
			vector<string> keyword, vector<string> dangerous, int threshold) {
		int sz = address.size() + 9;
		vector<vector<string> > k(keyword.size());

		fo(i,keyword.size()) {
			stringstream ss(keyword[i]);
			string s;
			while (ss >> s)
				k[i].push_back(s);
		}

		bool ban[60]={0};

		while (sz--) {
			fo(i,k.size()) {
				if(ban[i])
					continue;

				int cnt = 0;
				bool pos[60]={0};
				fo(j,k[i].size())
					fo(x,dangerous.size()) {
						if (dangerous[x] == k[i][j])
							cnt++, pos[j] = 1;
					}
				if (cnt >= threshold){
					ban[i]=1;
					fo(j,k[i].size())
						if (!pos[j])
							dangerous.push_back(k[i][j]);
				}
			}
		}
		
		vector<string> res;
		fo(i,address.size())
			if(ban[i])
				res.push_back(address[i]);
		return res;

	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<string> p0, vector<string> p1,
		vector<string> p2, int p3, bool hasAnswer, vector<string> p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}" << "," << p3;
	cout << "]" << endl;
	InternetSecurity *obj;
	vector<string> answer;
	obj = new InternetSecurity();
	clock_t startTime = clock();
	answer = obj->determineWebsite(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p4.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p4[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p4.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p4[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<string> p0;
	vector<string> p1;
	vector<string> p2;
	int p3;
	vector<string> p4;

	{
		// ----- test 0 -----
		string t0[] = { "www.topcoder.com", "www.sindicate_of_evil.com",
				"www.happy_citizens.com" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "hack encryption decryption internet algorithm",
				"signal interference evil snake poison algorithm",
				"flower baloon topcoder blue sky sea" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "hack", "encryption", "decryption", "interference",
				"signal", "internet" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 3;
		string t4[] = { "www.topcoder.com", "www.sindicate_of_evil.com" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "brokenlink", "flowerpower.net", "purchasedomain.com" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "broken", "rose tulips",
				"cheap free domain biggest greatest" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "biggest", "enemy", "hideout" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 2;
		p4.clear() /*{}*/;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "a..a.ab.", "...aa.b" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "a bc def", "def ghij klmno" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "a", "b", "c", "d", "e" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 1;
		string t4[] = { "a..a.ab.", "...aa.b" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "www.tsa.gov" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "information assurance signal intelligence research" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "signal", "assurance", "penguin" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 2;
		string t4[] = { "www.tsa.gov" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
