#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
typedef long long ll;
using namespace std;

class CorporationSalary {
public:
	vs rel;
	ll memo[52];
	ll DP(int idx) {
		if (memo[idx] != -1)
			return memo[idx];

		ll ret = 0;
		rep(i,sz(rel[idx]))
			if(rel[idx][i]=='Y')
				ret += DP(i);

		return memo[idx] = max(ret,1LL);
	}
	long long totalSalary(vector<string> relations) {
		rel = relations;
		mem(memo,-1);

		ll ret = 0;
		rep(i,sz(relations))
			ret += DP(i);
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<string> p0, bool hasAnswer,
		long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CorporationSalary *obj;
	long long answer;
	obj = new CorporationSalary();
	clock_t startTime = clock();
	answer = obj->totalSalary(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<string> p0;
	long long p1;

	{
		// ----- test 0 -----
		string t0[] = { "N" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1ll;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "NNYN", "NNYN", "NNNN", "NYYN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 5ll;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "NNNNNN", "YNYNNY", "YNNNNY", "NNNNNN", "YNYNNN",
				"YNNYNN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 17ll;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "NYNNYN", "NNNNNN", "NNNNNN", "NNYNNN", "NNNNNN",
				"NNNYYN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 8ll;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "NNNN", "NNNN", "NNNN", "NNNN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4ll;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
