#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
using namespace std;

struct node {
	int to, dur, money;
};
node tonode(int to, int dur, int money) {
	node n = { to, dur, money };
	return n;
}

//a b departure time cost
class OnTime {
public:
	vector<node> table[20002][55];
	int memo[20002][55];
	int mx,d;
	int DP(int time, int pos) {

		if (time > mx)
			return 1e9;

		if(pos==d)
			return 0;

		int&m = memo[time][pos];
		if (m != -1)
			return m;

		int c1 = DP(time + 1, pos);
		int c2 = 1e9;
		fo(i,table[time][pos].size()) {
			node n = table[time][pos][i];
			c2 = min(c2, DP(time + n.dur+1, n.to) + n.money);
		}

		return m=min(c1,c2);
	}

	void split(vi& v, string str) {
		stringstream ss(str);
		int n;
		while (ss >> n)
			v.push_back(n);
	}

	int minCost(int N, int T, vector<string> buses) {
		mx=T+1;
		d=N-1;

		memset(memo, -1, sizeof memo);

		fo(i,20002)
			fo(j,55)
				table[i][j].clear();

		fo(i,buses.size()) {
			vi bus;
			split(bus, buses[i]);
			table[bus[2]][bus[0]].push_back(tonode(bus[1], bus[3], bus[4]));
		}

		int ret = DP(0,0);
		return (ret==1e9)?-1:ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector<string> p2,
		bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	OnTime *obj;
	int answer;
	obj = new OnTime();
	clock_t startTime = clock();
	answer = obj->minCost(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	vector<string> p2;
	int p3;

	{
		// ----- test 0 -----
		p0 = 3;
		p1 = 8;
		string t2[] = { "0 1 0 4 3", "1 2 5 3 4" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 7;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 3;
		p1 = 8;
		string t2[] = { "0 1 0 4 3", "1 2 6 3 4" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 3;
		p1 = 7;
		string t2[] = { "0 1 0 5 1", "1 2 6 1 40", "0 1 1 2 5", "1 2 4 2 5" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 10;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 3;
		p1 = 8;
		string t2[] = { "0 1 0 5 3", "1 2 5 3 4" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = -1;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 3;
		p1 = 100;
		string t2[] = { "0 1 0 1 1" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = -1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = 9;
		p1 = 100;
		string t2[] = { "0 3 1 6 15", "0 6 0 23 20", "6 2 25 15 30",
				"6 1 30 15 40", "3 1 15 35 10", "3 2 30 80 40", "1 5 55 25 25",
				"1 2 49 31 10", "2 8 85 10 10", "5 8 83 15 5" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 55;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
