#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define fo(i,n) for(int i=0; i<n; i++)
#define foo(i,m,n) for(int i=m; i<n; i++)
#define foe(i,m,n) for(int i=m; i<=n; i++)
#define be(n) n.begin(),n.end()
#define rbe(n) n.rbegin(),n.rend()
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
typedef long long ll;
using namespace std;

map<string, vs> win;
map<string, string> lose;
bool cmp(string a, string b) {
	int sz1 = win[a].size(), sz2 = win[b].size();
	if (a == "" || sz1 > sz2)
		return 1;
	if (b == "" || sz2 > sz1)
		return 0;

	return cmp(lose[a], lose[b]);
}

class TournamentRanker {
public:

	vector<string> rankTeams(vector<string> names, vector<string> lostTo) {
		win.clear(), lose.clear();

		fo(i,lostTo.size())
			win[lostTo[i]].push_back(names[i]), lose[names[i]] = lostTo[i];

		sort(names.begin(), names.end(), cmp);
		return names;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<string> p0, vector<string> p1,
		bool hasAnswer, vector<string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TournamentRanker *obj;
	vector<string> answer;
	obj = new TournamentRanker();
	clock_t startTime = clock();
	answer = obj->rankTeams(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<string> p0;
	vector<string> p1;
	vector<string> p2;

	{
		// ----- test 0 -----
		string t0[] = { "RODDICK", "SCHUETTLER", "FERREIRA", "AGASSI" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "SCHUETTLER", "AGASSI", "AGASSI", "" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "AGASSI", "SCHUETTLER", "FERREIRA", "RODDICK" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "DUKE", "SETON HALL", "ILLINOIS", "CINCINNATI",
				"NORTH CAROLINA", "TEXAS", "XAVIER", "MISSISSIPPI STATE" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "", "DUKE", "DUKE", "ILLINOIS", "TEXAS", "XAVIER",
				"DUKE", "XAVIER" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "DUKE", "XAVIER", "ILLINOIS", "TEXAS", "SETON HALL",
				"MISSISSIPPI STATE", "CINCINNATI", "NORTH CAROLINA" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "JAVA", "VISUAL BASIC" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "VISUAL BASIC", "" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "VISUAL BASIC", "JAVA" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K",
				"L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W",
				"X", "Y", "Z", "AA", "BA", "CA", "DA", "EA", "FA" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "L", "T", "L", "FA", "A", "AA", "M", "M", "G", "L",
				"H", "S", "P", "H", "J", "S", "BA", "P", "", "P", "N", "P",
				"CA", "S", "M", "R", "S", "CA", "S", "Z", "R", "J" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "S", "P", "L", "M", "CA", "R", "J", "H", "AA", "T",
				"A", "G", "BA", "Z", "FA", "N", "X", "V", "C", "Y", "W", "EA",
				"O", "K", "F", "B", "E", "I", "Q", "DA", "D", "U" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
