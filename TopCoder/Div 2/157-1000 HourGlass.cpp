#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
#define fnd(v,x) (find(all((v)),(x))!=(v).end())
#define itr(A,B) typeof(B) A = B

typedef long long ll;
using namespace std;


struct state{
    int g1,g2,tm;
    state(){

    }
    state(int gg1, int gg2, int tmm){
        g1 = gg1, g2 = gg2, tm = tmm;
    }
};

class HourGlass {
public:

    set<int> st;
    bool vis[52][52][5000];
    void BFS(int gl1, int gl2){
        st.insert(gl1);
        st.insert(gl2);
        queue<state> q;
        q.push(state(0,0,0));
        while(q.size()){

            state stt = q.front();
            q.pop();
            if(stt.tm > 1000) continue;
            if((stt.g1 == 0 || stt.g2 == 0) && stt.tm){
                st.insert(stt.tm);
            }

            state ns = state(0,max(0,stt.g2-stt.g1),stt.tm+stt.g1);
            if(!vis[ns.g1][ns.g2][ns.tm]){
                vis[ns.g1][ns.g2][ns.tm]=1;
                q.push(ns);
            }
            ns = state(max(0,stt.g1-stt.g2),0,stt.tm+stt.g2);
            if(!vis[ns.g1][ns.g2][ns.tm]){
                vis[ns.g1][ns.g2][ns.tm]=1;
                q.push(ns);
            }
            if(stt.g1 == 0 || stt.g2 == 0){
                ns = state(gl1-stt.g1,stt.g2,stt.tm);
                if(!vis[ns.g1][ns.g2][ns.tm]){
                    vis[ns.g1][ns.g2][ns.tm]=1;
                    q.push(ns);
                }
                ns = state(stt.g1,gl2-stt.g2,stt.tm);
                if(!vis[ns.g1][ns.g2][ns.tm]){
                    vis[ns.g1][ns.g2][ns.tm]=1;
                    q.push(ns);
                }
                ns = state(gl1-stt.g1,gl2-stt.g2,stt.tm);
                if(!vis[ns.g1][ns.g2][ns.tm]){
                    vis[ns.g1][ns.g2][ns.tm]=1;
                    q.push(ns);
                }
            }

        }

    }

    vector <int> measurable(int glass1, int glass2) {
        long long x = 1<<63;
        vi res(st.begin(),st.end());
        return vector<int>(res.begin(),res.begin()+10);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, vector <int> p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1;
    cout << "]" << endl;
    HourGlass *obj;
    vector <int> answer;
    obj = new HourGlass();
    clock_t startTime = clock();
    answer = obj->measurable(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p2.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p2[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p2.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p2[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <int> p2;

    {
	// ----- test 0 -----
	p0 = 5;
	p1 = 7;
	int t2[] = {5,7,9,10,11,12,13,14,15,16};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 1 -----
	p0 = 13;
	p1 = 5;
	int t2[] = {5,10,13,15,16,17,18,19,20,21};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 2 -----
	p0 = 23;
	p1 = 23;
	int t2[] = {23,46,69,92,115,138,161,184,207,230};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 3 -----
	p0 = 24;
	p1 = 30;
	int t2[] = {24,30,36,42,48,54,60,66,72,78};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
    }

    {
	// ----- test 4 -----
	p0 = 1;
	p1 = 50;
	int t2[] = {1,2,3,4,5,6,7,8,9,10};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
