#include <bits/stdc++.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define indexof(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

int n;
int memo[2][2][560][560][2][2];
const int mod = 555555555;
int DP(bool prv1, bool prv2, int idx, int rem, bool isodd1, bool isodd2){
    if(rem < 0) return 0;
    if(idx == n) return rem==0&&(isodd2 == 0);
    int& m = memo[prv1][prv2][idx][rem][isodd1][isodd2];
    if(m != -1) return m;
    m = 0;
    if(prv1==0 && prv2 == 0){//##
        //###
        if(idx && idx<n-1)
            m = (0LL + m + DP(0,0,idx+1,rem-1,0, 0))%mod;
        //##.
        m = (0LL + m + DP(0,1,idx+1,rem,0, idx==0?1:0))%mod;
    }
    else if(prv1 == 0 && prv2 == 1){//#.
        //#.#
        if(idx < n-1)
            m = (0LL + m + DP(1,0,idx+1,rem-1,isodd2,0))%mod;
        //#..
        m = (0LL + m + DP(1,1,idx+1,rem,isodd2,isodd2))%mod;
    }

    else if(prv1 == 1 && prv2 == 0){//.#
        //.##
        if(idx < n-1)
            m = (0LL + m + DP(0,0,idx+1,rem-1,0,0))%mod;
        //.#.
        m = (0LL + m + DP(0,1,idx+1,rem,0,isodd1))%mod;
    }
    else if(prv1 == 1 && prv2 == 1){//..
        //..#
        if(idx < n-1)
            m = (0LL + m + DP(1,0,idx+1,rem-1,isodd2,0))%mod;
        //...
        m = (0LL + m + DP(1,1,idx+1,rem,isodd2, (isodd1^isodd2) ))%mod;
    }
    return m;
}
class MuddyRoad2 {
public:
    int theCount(int N, int muddyCount) {
        n = N;
        mem(memo,-1);
        return DP(0,0,0,muddyCount,0,0);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1;
    cout << "]" << endl;
    MuddyRoad2 *obj;
    int answer;
    obj = new MuddyRoad2();
    clock_t startTime = clock();
    answer = obj->theCount(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = 5;
        p1 = 1;
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 5;
        p1 = 2;
        p2 = 2;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 10;
        p1 = 4;
        p2 = 65;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 314;
        p1 = 78;
        p2 = 498142902;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 555;
        p1 = 222;
        p2 = 541606281;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
