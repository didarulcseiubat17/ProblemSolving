/*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 1e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

int n, k, ID;
int ID2;

int restaurant_pos[201];
int memo[201][31];
int cost[201][201];

int answer(int s, int k) {

	if (k == 1)
		return cost[s][n - 1];

	if (memo[s][k] != -1)
		return memo[s][k];

	int mn = OO;

	for (int i = s; i < n - 1; i++) {

		int sol = cost[s][i] + answer(i + 1, k - 1);

		if (sol < mn)
			mn = sol;
	}

	return memo[s][k] = mn;
}

void Build(int s, int k) {

	if (k == 1) {
		if (s != n - 1)
			printf("Depot %d at restaurant %d serves restaurants %d to %d\n",
					ID2, (s + n - 1 + 2) / 2, s + 1, n - 1 + 1);

		else
			printf("Depot %d at restaurant %d serves restaurant %d\n", ID2, s
					+ 1, s + 1);
		return;
	}

	int opt = memo[s][k];
	int ind = 0;

	for (int i = s; i < n - 1; i++) {
		int sol = cost[s][i] + answer(i + 1, k - 1);
		if (sol == opt) {
			ind = i;
			break;
		}
	}
	if (s != ind)
		printf("Depot %d at restaurant %d serves restaurants %d to %d\n", ID2,
				(s + ind + 2) / 2, s + 1, ind + 1);

	else
		printf("Depot %d at restaurant %d serves restaurant %d\n", ID2, s + 1,
				s + 1);
	ID2++;

	Build(ind + 1, k - 1);
}

int main() {
	ID = 1;
	while (1) {
		scanf("%d%d", &n, &k);
		if (!n && !k)
			break;
		for (int i = 0; i < n; i++)
			scanf("%d", &restaurant_pos[i]);

		CLR(memo,-1);
		CLR(cost,-1);

		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++) {
				int p = restaurant_pos[(i + j) / 2];
				int sum = 0;
				for (int k = i; k <= j; k++)
					sum += abs(p - restaurant_pos[k]);
				cost[i][j] = sum;
			}

		int sol = answer(0, k);

		printf("Chain %d\n", ID++);

		/* print path */
		ID2 = 1;
		Build(0, k);

		printf("Total distance sum = %d\n", sol);
		printf("\n");
	}

	return 0;
}
