/*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 1e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

string str;
int memo[1001][1001];

int dp(int i, int j) {
	if (i >= j)
		return 0;

	if (memo[i][j] != -1)
		return memo[i][j];

	if (str[i] == str[j])
		return memo[i][j] = dp(i + 1, j - 1);

	return memo[i][j] = min(dp(i + 1, j), dp(i, j - 1)) + 1;
}

string build(int i, int j) {
	string ans = "";
	if (i > j)
		return ans;

	if (i == j)
		return ans + str[i];

	if (str[i] == str[j])
		return str[i] + build(i + 1, j - 1) + str[j];

	if (memo[i][j - 1] < memo[i + 1][j])
		return str[j] + build(i, j - 1) + str[j];
	else
		return str[i] + build(i + 1, j) + str[i];

}
int main() {
//	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
	while (getline(cin, str)) {
		CLR(memo,-1);
		cout << dp(0, str.size() - 1) << " ";
		cout << build(0, str.size() - 1) << endl;
	}
	return 0;
}
