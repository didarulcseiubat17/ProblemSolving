#include<iostream>
#include<vector>
#include<stdio.h>
#include<iomanip>
using namespace std;

vector<vector<int> > mat;
int n, m;
int memo[11][101];
# define OO  100000

int best(int cursIdx, int remTime) {

	if (remTime == 0 && cursIdx != n)
			return -OO;  // i cant reach 

	if (cursIdx == n)
		return 0; // done

	if (memo[cursIdx][remTime] != -1) 
		return memo[cursIdx][remTime];

	int ret = -OO;

	for (int i = 0; i < remTime; i++) {
		if (mat[cursIdx][i] < 5)
			continue;  
		int ans = best(cursIdx + 1, remTime - (i + 1));

		if (ans == -OO)
			break;
		ret = max(ret, ans + mat[cursIdx][i]);
	}
	return memo[cursIdx][remTime] = ret;

}
int main() {
	int tst;
	scanf("%d", &tst);
	while (tst--) {
		scanf("%d %d", &n, &m);
		mat.clear();
		mat.resize(n, vector<int> (m, 0));
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				scanf("%d", &mat[i][j]);
		memset(memo, -1, sizeof memo);
		double ret = best(0, m);
		if (ret == -OO)
			printf("Peter, you shouldn't have played billiard that much.\n");
		else
			printf("Maximal possible average mark - %.2lf.\n", 1e-9 + (ret / n));
	}
	return 0;
}
