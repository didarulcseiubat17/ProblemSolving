/*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 1e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };
# define mod 10000007
int tst, n, ret;
int nums[251];
int memo[251][251][251];

int dp(int lastIdx, int curIdx, int nextIdx) {
	if (nextIdx == n)
		return 1;

	if (memo[lastIdx][curIdx][nextIdx] != -1)
		return memo[lastIdx][curIdx][nextIdx];

	int ret = dp(lastIdx, curIdx, nextIdx + 1);

	if (nums[curIdx] - nums[lastIdx] == nums[nextIdx] - nums[curIdx])
		ret = (ret + dp(curIdx, nextIdx, nextIdx + 1)) % mod;

	return memo[lastIdx][curIdx][nextIdx] = ret;

}
int main() {
	scanf("%d", &tst);
	loop2(k,1,tst+1) {
		scanf("%d", &n);
		loop(i,n)
			scanf("%d", &nums[i]);
		CLR(memo,-1);
		ret = n;
		loop(i,n)
			loop2(j,i+1,n)
				ret = (ret + dp(i, j, j + 1)) % mod;
		printf("Case %d: %d\n", k, ret);
	}
	return 0;
}
