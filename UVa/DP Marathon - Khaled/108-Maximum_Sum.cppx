/*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 1e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

int n;
int mat_count[101][101];
int sum[101];

int getMax() {
	int cur = sum[0];
	int bst = sum[0];
	for (int i = 1; i < n; i++) {
		if (cur < 0)
			cur = sum[i];
		else
			cur += sum[i];
		bst = max(bst, cur);
	}
	return bst;
}
int main() {
	scanf("%d", &n);
	int tmp = 0;
	int m;
	for (int i = 0; i < n; i++) {
		tmp = 0;
		for (int j = 0; j < n; j++) {
			scanf("%d", &m);
			mat_count[i][j] = m + tmp;
			tmp = mat_count[i][j];
		}
	}

	int v, c;
	int ret = 0;
	for (int w = 1; w <= n; w++) {
		for (int s = 0; s <= n - w; s++) {
			v = 0;
			for (int row = 0; row < n; row++) {
				c = (s - 1) < 0 ? 0 : mat_count[row][s - 1];
				v = mat_count[row][s + w - 1] - c;
				sum[row] = v;
			}
			ret = max(ret, getMax());
		}
	}
	printf("%d\n", ret);
	return 0;
}
