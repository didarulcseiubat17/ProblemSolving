/*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 1e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

int nLacks, nhours;
int fish[26], dic[26], timeCost[26];
int memo[26][193][193];
int view[26];

int dp(int idx, int remMin, int taken) {
	if (idx == nLacks || remMin <= 0)
		return 0;

	if (memo[idx][remMin][taken] != -1)
		return memo[idx][remMin][taken];

	int expected = fish[idx] - (dic[idx] * taken);

	int c1 = max(expected, 0) + dp(idx, remMin - 1, taken + 1);

	int c2 = dp(idx + 1, remMin - timeCost[idx], 0);

	return memo[idx][remMin][taken] = max(c1, c2);

}

/*********************************************************/

void build(int idx, int remMin, int taken) {

	if (idx == nLacks || remMin <= 0)
		return;

	int ans = dp(idx, remMin, taken);

	int expected = fish[idx] - (dic[idx] * taken);

	int c1 = max(expected, 0) + dp(idx, remMin - 1, taken + 1);

	if (ans == c1) {
		view[idx] += 5;
		build(idx, remMin - 1, taken + 1);
	} else
		build(idx + 1, remMin - timeCost[idx], 0);
}
/*********************************************************/
int main() {
	//freopen("zin.txt", "rt", stdin);
	//freopen("zout.txt", "wt", stdout);
	int id = 0;
	while (scanf("%d", &nLacks)) {
		if (!nLacks)
			return 0;
		if (id)
			cout << endl;
		scanf("%d", &nhours);
		loop(i,nLacks)
			scanf("%d", &fish[i]);
		loop(i,nLacks)
			scanf("%d", &dic[i]);
		loop(i,nLacks-1)
			scanf("%d", &timeCost[i]);

		int remMin = (nhours * 60) / 5;

		CLR (memo,-1);
		CLR(view,0);

		int ret = dp(0, remMin, 0);
		build(0, remMin, 0);

		cout << view[0];
		loop2(i,1,nLacks)
			cout << ", " << view[i];
		cout << endl;
		cout << "Number of fish expected: " << ret << endl;
		id++;
	}
	return 0;
}
