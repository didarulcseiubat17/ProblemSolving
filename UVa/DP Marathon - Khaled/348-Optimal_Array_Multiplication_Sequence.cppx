/*
 *	E-Mail : khaled.samy@fci-cu.edu.eg
 *	TopCoder Handle : Khaled91
 *	Another buggy code by Khaled Samy ;)
 */
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 1e9;
const int LOO = 1 << 30;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

pii a[11];
ll dp[11][11];
int N;
int path[11][11];

ll MCM(int s, int e) {

	if (s >= e)
		return 0;

	if (dp[s][e] != -1)
		return dp[s][e];

	ll ret = LOO;

	for (int i = s; i < e; i++) {
		ll sol = MCM(s, i) + MCM(i + 1, e) + (a[s].first * a[i].second
				* a[e].second);

		if (sol < ret)
			ret = sol, path[s][e] = i;
	}

	return dp[s][e] = ret;
}
void print(int s, int e) {

	//cout<<s<<" "<<e<<" "<<path[s][e]<<endl;
	if (s == e) {
		printf("A%d", s + 1);
		return;
	}

	printf("(");
	print(s, path[s][e]);
	printf(" x ");
	print(path[s][e] + 1, e);
	printf(")");
}
int main() {
	int ID = 1;
	while (scanf("%d", &N) && N) {
		loop(i,N)
			scanf("%d%d", &a[i].first, &a[i].second);

		CLR(dp,-1);
		MCM(0, N - 1);
		printf("Case %d: ", ID++);
		print(0, N - 1);
		printf("\n");
	}
	return 0;
}
