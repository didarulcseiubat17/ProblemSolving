#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,m,n) for(int i=m; i<n; i++)
#define repe(i,m,n) for(int i=m; i<=n; i++)
#define repi(it,stl) for(typeof((stl).begin()) it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define allarr(n) (n), (n)+( (sizeof (n)) / (sizeof (*n)) )
#define mp(a,b) make_pair((a),(b))
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream 
typedef long long ll;
using namespace std;

char graph[12][12][12];
int k, h, w;
int x, y;
int diri[6] = { -1, 1, 0, 0, 0, 0 };
int dirj[6] = { 0, 0, 1, -1, 0, 0 };
int dirk[6] = { 0, 0, 0, 0, 1, -1 };

bool stop = 0;
bool vis[12][12][12];
int result = 1;

bool isfinal() {
	rep(kk,k)
		rep(i,h)
			rep(j,w)
				if (graph[kk][i][j] == '.' && !vis[kk][i][j])
					return 0;
	return 1;
}
int DFS(int ii, int jj, int kk) {

	int res =1;
	rep(d,6) {
		int newi = ii + diri[d];
		int newj = jj + dirj[d];
		int newk = kk + dirk[d];

		if (newi >= h || newi < 0 || newj >= w || newj < 0 || newk >= k || newk
				< 0)
			continue;

		if (vis[newk][newi][newj] || graph[newk][newi][newj] == '#')
			continue;

		vis[newk][newi][newj] = 1;
		res += DFS(newi, newj, newk);
	}

	return res;

}
int main() {

	scanf("%d%d%d", &k, &h, &w);

	rep(kk,k)
		rep(i,h)
			scanf("%s", graph[kk][i]);

	scanf("%d%d", &x, &y);
	--x, --y;

	vis[0][x][y] = 1;

	printf("%d", DFS(x, y, 0));
	return 0;
}
